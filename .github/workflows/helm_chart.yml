name: Checking Helm Chart

on:
  pull_request:
    branches:
      - dev
    types: [opened, synchronize, reopened, edited]
    paths:
      - 'helm/**'
  workflow_dispatch:
    inputs:
      helm_path:
        description: 'Path to Helm charts (default: ./helm)'
        required: false
        default: './helm'
        type: string
      kind_version:
        description: 'Kind version to use'
        required: false
        default: 'v0.27.0'
        type: string
      k8s_version:
        description: 'Kubernetes version for kind cluster'
        required: false
        default: 'v1.30.10'
        type: string
permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

env:
  HELM_PATH: ${{ github.event.inputs.helm_path || './helm' }}
  KIND_VERSION: ${{ github.event.inputs.kind_version || '0.27.0' }}
  K8S_VERSION: ${{ github.event.inputs.k8s_version || 'v1.30.10' }}
  KIND_CLUSTER_NAME: "kind"

jobs:
  helm_chart:
    runs-on: self-hosted

    outputs:
      UNSTABLE: ${{ steps.set-env.outputs.unstable }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run make sync-version-from-scratch # Every time we should have only stable version in our code. So UNSTABLE=false here
        run: |
          make sync-version-from-scratch UNSTABLE=false

      - name: Check for uncommitted changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "❌ Uncommitted changes detected after make sync-version-from-scratch"
            git status --porcelain
            git diff
            exit 1
          fi
  
      - name: Install Helm unittest plugin (if not exists)
        run: |
          if ! helm plugin list | grep -q unittest; then
            helm plugin install https://github.com/helm-unittest/helm-unittest
          else
            echo "Helm unittest plugin is already installed, skipping installation."
          fi
      
      - name: Run Helm unittest
        run: |
          # Iterate through all directories in HELM_PATH
          for dirpath in "${HELM_PATH}"/* ; do
            [ ! -d "${dirpath}" ] && continue
            HELM_CHART_NAME=$(basename "${dirpath}")
            echo "Processing chart: ${HELM_CHART_NAME}"
            echo "----------------------------------------"
            
            echo "Building dependencies for ${HELM_CHART_NAME}"
            helm dependency build "${HELM_PATH}/${HELM_CHART_NAME}"
            
            echo "Linting ${HELM_CHART_NAME}"
            helm lint "${HELM_PATH}/${HELM_CHART_NAME}"
            
            echo "Templating ${HELM_CHART_NAME}"
            helm template soperator "${HELM_PATH}/${HELM_CHART_NAME}" --namespace soperator > /dev/null
            
            echo "Running unit tests for ${HELM_CHART_NAME}"
            if [ -d "${HELM_PATH}/${HELM_CHART_NAME}/tests" ]; then
              helm unittest "${HELM_PATH}/${HELM_CHART_NAME}"
              if [ $? -ne 0 ]; then
                echo "Unit tests failed for chart: ${HELM_CHART_NAME}"
                exit 1
              fi
            else
              echo "No tests found for ${HELM_CHART_NAME}, skipping unit tests"
            fi
            
            echo "----------------------------------------"
          done

      - name: Delete existing kind cluster if exists
        run: |
          ARCH=$(uname -m)
          case "$ARCH" in
            x86_64)   KIND_ARCH="x64"   ;;
            aarch64 | arm64) KIND_ARCH="arm64" ;;
            *)        echo "Unsupported architecture: $ARCH" >&2
                      KIND_ARCH="x64"  # fallback
                      ;;
          esac
      
          KIND_BIN="/home/soperator/actions-runner/_work/_tool/kind/${{ env.KIND_VERSION }}/$KIND_ARCH/kind"
          "$KIND_BIN" delete cluster --name kind || true

      - uses: engineerd/setup-kind@v0.6.2
        name: Setup kind
        with:
          version: v${{ env.KIND_VERSION }}
          image: "kindest/node:${{ env.K8S_VERSION }}"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: ${{ env.K8S_VERSION }}

      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main

      - name: Testing umbrella chart soperator-fluxcd
        run: |
          echo "Installing Flux2"
          helm install -n flux-system --create-namespace flux oci://ghcr.io/fluxcd-community/charts/flux2
          
          echo "Waiting for helm-controller to be ready"
          kubectl wait --for=condition=ready pod -l app=helm-controller -n flux-system --timeout=300s
          echo "Waiting for kustomize-controller to be ready"
          kubectl wait --for=condition=ready pod -l app=kustomize-controller -n flux-system --timeout=300s
          
          echo "Installing soperator-fluxcd chart"
          helm upgrade --install soperator-fluxcd ./helm/soperator-fluxcd --namespace soperator --create-namespace
          
          echo "Waiting for HelmReleases to be ready"
          # Wait for all HelmReleases with name containing 'soperator-flux' to be ready
          for release in $(kubectl get helmreleases.helm.toolkit.fluxcd.io -n flux-system --no-headers -o custom-columns=":metadata.name" | grep soperator-flux); do
            echo "Waiting for HelmRelease '$release' to be ready..."
            kubectl wait --for=condition=ready helmreleases.helm.toolkit.fluxcd.io/$release -n flux-system --timeout=600s
            if [ $? -eq 0 ]; then
              echo "HelmRelease '$release' is ready"
            else
              echo "HelmRelease '$release' failed to become ready"
              kubectl describe helmreleases.helm.toolkit.fluxcd.io/$release -n flux-system
              exit 1
            fi
          done
          
          echo "All HelmReleases are ready, running Helm tests"
          helm test soperator-fluxcd --namespace soperator
