name: Build All in one job

on:
  push:
    branches:
      - main
      - dev
    paths-ignore:
      #      - '.github/**'
      - 'docs/**'
      - 'CODEOWNERS'
      - 'LICENSE'
      - 'PROJECT'
      - 'README.md'
      - 'SECURITY.md'
      - 'images/worker/gpubench/**'
      - 'helm/**'

  # pull_request are defined separately to allow to run CI from forks.
  pull_request:
    branches-ignore:
      - main
    types: [opened, synchronize, reopened]
    paths-ignore:
      #      - '.github/**'
      - 'docs/**'
      - 'CODEOWNERS'
      - 'LICENSE'
      - 'PROJECT'
      - 'README.md'
      - 'SECURITY.md'
      - 'images/worker/gpubench/**'
      - 'helm/**'

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  pre-build:
    runs-on: self-hosted

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install GO
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Generate version file
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            make get-version UNSTABLE=false >> version.txt
            echo "false" >> version.txt
          else
            make get-version UNSTABLE=true >> version.txt
            echo "true" >> version.txt
          fi

      - name: Upload version file
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version
          path: ./version

      - name: Read version and unstable
        id: read-version
        run: |
          VERSION=$(sed -n '1p' ./version/version.txt)
          UNSTABLE=$(sed -n '2p' ./version/version.txt)
          
          echo "Version: $VERSION"
          echo "Unstable: $UNSTABLE"

  build:
    runs-on: ${{ matrix.runner }}
    needs: pre-build
    strategy:
      matrix:
        include:
          - arch: amd64
            alt_arch: x86_64
            runner: X64
          - arch: arm64
            alt_arch: aarch64
            runner: ARM64
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install GO
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: golangci-lint
        uses: golangci/golangci-lint-action@1481404843c368bc19ca9406f87d6e0fc97bdcfd # v7
        with:
          version: v2.0.2 # version of golangci-lint, should be in sync with Makefile.
        env:
          GOEXPERIMENT: synctest

      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version
          path: ./version

      - name: Read version and unstable
        id: read-version
        run: |
          VERSION=$(sed -n '1p' ./version/version.txt)
          UNSTABLE=$(sed -n '2p' ./version/version.txt)
          
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "unstable=$UNSTABLE" >> "$GITHUB_OUTPUT"
          
          echo "Version: $VERSION"
          echo "Unstable: $UNSTABLE"

      - name: Debug VERSION and UNSTABLE vars
        run: |
          echo "Building version ${{ steps.read-version.outputs.version }}" 
          echo "Unstable: ${{ steps.read-version.outputs.unstable }}"

      - name: Run make sync-version-from-scratch # Every time we should have only stable version in our code. So UNSTABLE=false here
        run: |
          make kustomize helmify yq
          make sync-version-from-scratch UNSTABLE=false

      - name: Check for uncommitted changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "‚ùå Uncommitted changes detected after make sync-version-from-scratch"
            git status --porcelain
            git diff
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Log in to the Github Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build all images
        run: |
          # ARCH has the short form like: amd64, arm64
          ARCH=${{ matrix.arch }}
          # ALT_ARCH has the extended form like: x86_64, aarch64 (uname -m)
          ALT_ARCH=${{ matrix.alt_arch }}
          UNSTABLE=${{ steps.read-version.outputs.unstable }}
          IMAGE_VERSION="$(make get-image-version UNSTABLE=${UNSTABLE})-${ARCH}"
          VERSION=$(make get-version UNSTABLE=${UNSTABLE})
          OPERATOR_IMAGE_TAG=$(make get-operator-tag-version UNSTABLE=${UNSTABLE})
          DOCKER_BUILD_ARGS="--build-arg ARCH=${ARCH} --build-arg ALT_ARCH=${ALT_ARCH}"

          make sync-version UNSTABLE=${UNSTABLE}

          echo "Updating CRDs & auto-generated code (included in test step) & run tests"
          make test-coverage UNSTABLE="${UNSTABLE}"
          
          echo "Building image of the rebooter ${OPERATOR_IMAGE_TAG}-${ARCH}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_NAME=rebooter DOCKERFILE=rebooter/rebooter.dockerfile IMAGE_VERSION="${OPERATOR_IMAGE_TAG}-${ARCH}"
          echo "Pushing image of the rebooter ${OPERATOR_IMAGE_TAG}-${ARCH}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=rebooter IMAGE_VERSION="${OPERATOR_IMAGE_TAG}-${ARCH}"
          
          echo "Building image of the soperatorchecks ${OPERATOR_IMAGE_TAG}-${ARCH}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_NAME=soperatorchecks DOCKERFILE=soperatorchecks/soperatorchecks.dockerfile IMAGE_VERSION="${OPERATOR_IMAGE_TAG}-${ARCH}"
          echo "Pushing image of the soperatorchecks ${OPERATOR_IMAGE_TAG}-${ARCH}"
          make docker-push UNSTABLE="${UNSTABLE}" IMAGE_NAME=soperatorchecks IMAGE_VERSION="${OPERATOR_IMAGE_TAG}-${ARCH}"

          echo "Building image of the sconfigcontroller ${OPERATOR_IMAGE_TAG}-${ARCH}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_NAME=sconfigcontroller DOCKERFILE=sconfigcontroller/sconfigcontroller.dockerfile IMAGE_VERSION="${OPERATOR_IMAGE_TAG}-${ARCH}"
          echo "Pushing image of the sconfigcontroller ${OPERATOR_IMAGE_TAG}-${ARCH}"
          make docker-push UNSTABLE="${UNSTABLE}" IMAGE_NAME=sconfigcontroller IMAGE_VERSION="${OPERATOR_IMAGE_TAG}-${ARCH}"

          echo "Building image of the soperator ${OPERATOR_IMAGE_TAG}-${ARCH}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_NAME=slurm-operator DOCKERFILE=soperator/Dockerfile IMAGE_VERSION="${OPERATOR_IMAGE_TAG}-${ARCH}"
          echo "Pushing image of the soperator ${OPERATOR_IMAGE_TAG}-${ARCH}"
          make docker-push UNSTABLE="${UNSTABLE}" IMAGE_NAME=slurm-operator IMAGE_VERSION="${OPERATOR_IMAGE_TAG}-${ARCH}"
          
          echo "Building image of the munge ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=munge DOCKERFILE=munge/munge.dockerfile
          echo "Pushing image of the munge ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=munge IMAGE_VERSION=${IMAGE_VERSION}
          
          echo "Building image of the controller_slurmctld ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=controller_slurmctld DOCKERFILE=controller/slurmctld.dockerfile
          echo "Pushing image of the controller_slurmctld ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=controller_slurmctld IMAGE_VERSION=${IMAGE_VERSION}

          echo "Building image of the controller_slurmdbd ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=controller_slurmdbd DOCKERFILE=accounting/slurmdbd.dockerfile
          echo "Pushing image of the controller_slurmdbd ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=controller_slurmdbd IMAGE_VERSION=${IMAGE_VERSION}
          
          echo "Building image of the slurmrestd ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=slurmrestd DOCKERFILE=restd/slurmrestd.dockerfile
          echo "Pushing image of the slurmrestd ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=slurmrestd IMAGE_VERSION=${IMAGE_VERSION}
          
          # TODO: Remove after soperator-exporter is finished
          echo "Building image of the exporter ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=exporter DOCKERFILE=exporter/exporter.dockerfile
          echo "Pushing image of the exporter ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=exporter IMAGE_VERSION=${IMAGE_VERSION}
          
          echo "Building image of the soperator-exporter ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=soperator-exporter DOCKERFILE=soperator-exporter/soperator-exporter.dockerfile
          echo "Pushing image of the soperator-exporter ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=soperator-exporter IMAGE_VERSION=${IMAGE_VERSION}
          
          echo "Building image of the slurm_check_job ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=slurm_check_job DOCKERFILE=slurm_check_job/slurm_check_job.dockerfile
          echo "Pushing image of the slurm_check_job ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=slurm_check_job IMAGE_VERSION=${IMAGE_VERSION}
          
          echo "Building image of the k8s_check_job ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=k8s_check_job DOCKERFILE=k8s_check_job/k8s_check_job.dockerfile
          echo "Pushing image of the k8s_check_job ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=k8s_check_job IMAGE_VERSION=${IMAGE_VERSION}
          
          echo "Building image of the nccl_benchmark ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=nccl_benchmark DOCKERFILE=nccl_benchmark/nccl_benchmark.dockerfile
          echo "Pushing image of the nccl_benchmark ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=nccl_benchmark IMAGE_VERSION=${IMAGE_VERSION}
          
          echo "Building image of the login_sshd ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=login_sshd DOCKERFILE=login/sshd.dockerfile
          echo "Pushing image of the login_sshd ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=login_sshd IMAGE_VERSION=${IMAGE_VERSION}

          echo "Building image of the worker_slurmd ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=worker_slurmd DOCKERFILE=worker/slurmd.dockerfile
          echo "Pushing image of the worker_slurmd ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=worker_slurmd IMAGE_VERSION=${IMAGE_VERSION}

          echo "Common images were built"

          echo "Removing previous jail rootfs tar archive"
          rm -f images/jail_rootfs.tar

          echo "Building tarball for jail"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=jail DOCKERFILE=jail/jail.dockerfile DOCKER_OUTPUT="--output type=tar,dest=images/jail_rootfs.tar"
          echo "Built tarball jail_rootfs.tar"

          echo "Building image of the populate_jail ${IMAGE_VERSION}"
          make docker-build DOCKER_BUILD_ARGS="${DOCKER_BUILD_ARGS}" UNSTABLE="${UNSTABLE}" IMAGE_VERSION=${IMAGE_VERSION} IMAGE_NAME=populate_jail DOCKERFILE=populate_jail/populate_jail.dockerfile
          echo "Pushing image of the populate_jail ${IMAGE_VERSION}"
          make docker-push  UNSTABLE="${UNSTABLE}" IMAGE_NAME=populate_jail IMAGE_VERSION=${IMAGE_VERSION}

          echo "Removing jail rootfs tar archive to speedup further docker builds."
          rm -f images/jail_rootfs.tar
          
          echo "Pushing Helm charts"
          make release-helm UNSTABLE="${UNSTABLE}" OPERATOR_IMAGE_TAG="$OPERATOR_IMAGE_TAG"

  create-manifest:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install GO
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Log in to the Github Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version
          path: ./version

      - name: Read version and unstable
        id: read-version
        run: |
          VERSION=$(sed -n '1p' ./version/version.txt)
          UNSTABLE=$(sed -n '2p' ./version/version.txt)

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "unstable=$UNSTABLE" >> "$GITHUB_OUTPUT"

          echo "Version: $VERSION"
          echo "Unstable: $UNSTABLE"

      - name: Debug VERSION and UNSTABLE vars
        run: |
          echo "Building version ${{ steps.read-version.outputs.version }}" 
          echo "Unstable: ${{ steps.read-version.outputs.unstable }}"

      - name: Create and Push Multi-Arch Manifest
        run: |
          UNSTABLE=${{ steps.read-version.outputs.unstable }}
          IMAGE_VERSION=$(make get-image-version UNSTABLE=${UNSTABLE})
          VERSION=$(make get-version UNSTABLE=${UNSTABLE})
          OPERATOR_IMAGE_TAG=$(make get-operator-tag-version UNSTABLE=${UNSTABLE})
          
          echo "Building and push manifest of the rebooter"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=rebooter IMAGE_VERSION="${OPERATOR_IMAGE_TAG}"
          
          echo "Building and push manifest of the soperatorchecks"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=soperatorchecks IMAGE_VERSION="${OPERATOR_IMAGE_TAG}"

          echo "Building and push manifest of the sconfigcontroller"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=sconfigcontroller IMAGE_VERSION="${OPERATOR_IMAGE_TAG}"

          echo "Building and push manifest of the soperator"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=slurm-operator IMAGE_VERSION="${OPERATOR_IMAGE_TAG}"

          echo "Building and push manifest of the munge"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=munge
          
          echo "Building and push manifest of the controller_slurmctld"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=controller_slurmctld
          
          echo "Building and push manifest of the controller_slurmdbd"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=controller_slurmdbd
          
          echo "Building and push manifest of the slurmrestd"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=slurmrestd
          
          # TODO: Remove after soperator-exporter is finished
          echo "Building and push manifest of the exporter"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=exporter
          
          echo "Building and push manifest of the soperator-exporter"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=soperator-exporter
          
          echo "Building and push manifest of the slurm_check_job"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=slurm_check_job
          
          echo "Building and push manifest of the k8s_check_job"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=k8s_check_job
          
          echo "Building and push manifest of the nccl_benchmark"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=nccl_benchmark
          
          echo "Building and push manifest of the login_sshd"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=login_sshd
          
          echo "Building and push manifest of the worker_slurmd"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=worker_slurmd
          
          echo "Building and push manifest of the populate_jail"
          make docker-manifest UNSTABLE="${UNSTABLE}" IMAGE_NAME=populate_jail
