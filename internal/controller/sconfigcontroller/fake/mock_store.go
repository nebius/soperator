// Code generated by mockery v2.53.4. DO NOT EDIT.

package fake

import mock "github.com/stretchr/testify/mock"

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: name, content
func (_m *MockStore) Add(name string, content string) error {
	ret := _m.Called(name, content)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockStore_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - name string
//   - content string
func (_e *MockStore_Expecter) Add(name interface{}, content interface{}) *MockStore_Add_Call {
	return &MockStore_Add_Call{Call: _e.mock.On("Add", name, content)}
}

func (_c *MockStore_Add_Call) Run(run func(name string, content string)) *MockStore_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockStore_Add_Call) Return(_a0 error) *MockStore_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Add_Call) RunAndReturn(run func(string, string) error) *MockStore_Add_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
