// Code generated by mockery v2.53.4. DO NOT EDIT.

package fake

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// MockFs is an autogenerated mock type for the Fs type
type MockFs struct {
	mock.Mock
}

type MockFs_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFs) EXPECT() *MockFs_Expecter {
	return &MockFs_Expecter{mock: &_m.Mock}
}

// MkdirAll provides a mock function with given fields: path, mode
func (_m *MockFs) MkdirAll(path string, mode os.FileMode) error {
	ret := _m.Called(path, mode)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = rf(path, mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type MockFs_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - path string
//   - mode os.FileMode
func (_e *MockFs_Expecter) MkdirAll(path interface{}, mode interface{}) *MockFs_MkdirAll_Call {
	return &MockFs_MkdirAll_Call{Call: _e.mock.On("MkdirAll", path, mode)}
}

func (_c *MockFs_MkdirAll_Call) Run(run func(path string, mode os.FileMode)) *MockFs_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(os.FileMode))
	})
	return _c
}

func (_c *MockFs_MkdirAll_Call) Return(_a0 error) *MockFs_MkdirAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_MkdirAll_Call) RunAndReturn(run func(string, os.FileMode) error) *MockFs_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareNewFile provides a mock function with given fields: oldFile, content, mode
func (_m *MockFs) PrepareNewFile(oldFile string, content []byte, mode os.FileMode) (string, error) {
	ret := _m.Called(oldFile, content, mode)

	if len(ret) == 0 {
		panic("no return value specified for PrepareNewFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte, os.FileMode) (string, error)); ok {
		return rf(oldFile, content, mode)
	}
	if rf, ok := ret.Get(0).(func(string, []byte, os.FileMode) string); ok {
		r0 = rf(oldFile, content, mode)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []byte, os.FileMode) error); ok {
		r1 = rf(oldFile, content, mode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFs_PrepareNewFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareNewFile'
type MockFs_PrepareNewFile_Call struct {
	*mock.Call
}

// PrepareNewFile is a helper method to define mock.On call
//   - oldFile string
//   - content []byte
//   - mode os.FileMode
func (_e *MockFs_Expecter) PrepareNewFile(oldFile interface{}, content interface{}, mode interface{}) *MockFs_PrepareNewFile_Call {
	return &MockFs_PrepareNewFile_Call{Call: _e.mock.On("PrepareNewFile", oldFile, content, mode)}
}

func (_c *MockFs_PrepareNewFile_Call) Run(run func(oldFile string, content []byte, mode os.FileMode)) *MockFs_PrepareNewFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(os.FileMode))
	})
	return _c
}

func (_c *MockFs_PrepareNewFile_Call) Return(tempFileName string, err error) *MockFs_PrepareNewFile_Call {
	_c.Call.Return(tempFileName, err)
	return _c
}

func (_c *MockFs_PrepareNewFile_Call) RunAndReturn(run func(string, []byte, os.FileMode) (string, error)) *MockFs_PrepareNewFile_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: name
func (_m *MockFs) Remove(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockFs_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - name string
func (_e *MockFs_Expecter) Remove(name interface{}) *MockFs_Remove_Call {
	return &MockFs_Remove_Call{Call: _e.mock.On("Remove", name)}
}

func (_c *MockFs_Remove_Call) Run(run func(name string)) *MockFs_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFs_Remove_Call) Return(_a0 error) *MockFs_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_Remove_Call) RunAndReturn(run func(string) error) *MockFs_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RenameExchange provides a mock function with given fields: oldPath, newPath
func (_m *MockFs) RenameExchange(oldPath string, newPath string) error {
	ret := _m.Called(oldPath, newPath)

	if len(ret) == 0 {
		panic("no return value specified for RenameExchange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldPath, newPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_RenameExchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameExchange'
type MockFs_RenameExchange_Call struct {
	*mock.Call
}

// RenameExchange is a helper method to define mock.On call
//   - oldPath string
//   - newPath string
func (_e *MockFs_Expecter) RenameExchange(oldPath interface{}, newPath interface{}) *MockFs_RenameExchange_Call {
	return &MockFs_RenameExchange_Call{Call: _e.mock.On("RenameExchange", oldPath, newPath)}
}

func (_c *MockFs_RenameExchange_Call) Run(run func(oldPath string, newPath string)) *MockFs_RenameExchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockFs_RenameExchange_Call) Return(_a0 error) *MockFs_RenameExchange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_RenameExchange_Call) RunAndReturn(run func(string, string) error) *MockFs_RenameExchange_Call {
	_c.Call.Return(run)
	return _c
}

// RenameNoReplace provides a mock function with given fields: oldPath, newPath
func (_m *MockFs) RenameNoReplace(oldPath string, newPath string) error {
	ret := _m.Called(oldPath, newPath)

	if len(ret) == 0 {
		panic("no return value specified for RenameNoReplace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldPath, newPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_RenameNoReplace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameNoReplace'
type MockFs_RenameNoReplace_Call struct {
	*mock.Call
}

// RenameNoReplace is a helper method to define mock.On call
//   - oldPath string
//   - newPath string
func (_e *MockFs_Expecter) RenameNoReplace(oldPath interface{}, newPath interface{}) *MockFs_RenameNoReplace_Call {
	return &MockFs_RenameNoReplace_Call{Call: _e.mock.On("RenameNoReplace", oldPath, newPath)}
}

func (_c *MockFs_RenameNoReplace_Call) Run(run func(oldPath string, newPath string)) *MockFs_RenameNoReplace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockFs_RenameNoReplace_Call) Return(_a0 error) *MockFs_RenameNoReplace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_RenameNoReplace_Call) RunAndReturn(run func(string, string) error) *MockFs_RenameNoReplace_Call {
	_c.Call.Return(run)
	return _c
}

// SyncCaches provides a mock function with no fields
func (_m *MockFs) SyncCaches() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SyncCaches")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_SyncCaches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncCaches'
type MockFs_SyncCaches_Call struct {
	*mock.Call
}

// SyncCaches is a helper method to define mock.On call
func (_e *MockFs_Expecter) SyncCaches() *MockFs_SyncCaches_Call {
	return &MockFs_SyncCaches_Call{Call: _e.mock.On("SyncCaches")}
}

func (_c *MockFs_SyncCaches_Call) Run(run func()) *MockFs_SyncCaches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFs_SyncCaches_Call) Return(_a0 error) *MockFs_SyncCaches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_SyncCaches_Call) RunAndReturn(run func() error) *MockFs_SyncCaches_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFs creates a new instance of MockFs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFs(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFs {
	mock := &MockFs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
