// Code generated by mockery v2.53.4. DO NOT EDIT.

package fake

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockClock is an autogenerated mock type for the Clock type
type MockClock struct {
	mock.Mock
}

type MockClock_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClock) EXPECT() *MockClock_Expecter {
	return &MockClock_Expecter{mock: &_m.Mock}
}

// After provides a mock function with given fields: duration
func (_m *MockClock) After(duration time.Duration) <-chan time.Time {
	ret := _m.Called(duration)

	if len(ret) == 0 {
		panic("no return value specified for After")
	}

	var r0 <-chan time.Time
	if rf, ok := ret.Get(0).(func(time.Duration) <-chan time.Time); ok {
		r0 = rf(duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}

	return r0
}

// MockClock_After_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'After'
type MockClock_After_Call struct {
	*mock.Call
}

// After is a helper method to define mock.On call
//   - duration time.Duration
func (_e *MockClock_Expecter) After(duration interface{}) *MockClock_After_Call {
	return &MockClock_After_Call{Call: _e.mock.On("After", duration)}
}

func (_c *MockClock_After_Call) Run(run func(duration time.Duration)) *MockClock_After_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockClock_After_Call) Return(_a0 <-chan time.Time) *MockClock_After_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClock_After_Call) RunAndReturn(run func(time.Duration) <-chan time.Time) *MockClock_After_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClock creates a new instance of MockClock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClock {
	mock := &MockClock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
