// Code generated by mockery v2.52.2. DO NOT EDIT.

package fake

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	slurmapi "nebius.ai/slurm-operator/internal/slurmapi"

	v0041 "github.com/SlinkyProject/slurm-client/api/v0041"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetNode provides a mock function with given fields: ctx, nodeName
func (_m *MockClient) GetNode(ctx context.Context, nodeName string) (slurmapi.Node, error) {
	ret := _m.Called(ctx, nodeName)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 slurmapi.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (slurmapi.Node, error)); ok {
		return rf(ctx, nodeName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) slurmapi.Node); ok {
		r0 = rf(ctx, nodeName)
	} else {
		r0 = ret.Get(0).(slurmapi.Node)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type MockClient_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeName string
func (_e *MockClient_Expecter) GetNode(ctx interface{}, nodeName interface{}) *MockClient_GetNode_Call {
	return &MockClient_GetNode_Call{Call: _e.mock.On("GetNode", ctx, nodeName)}
}

func (_c *MockClient_GetNode_Call) Run(run func(ctx context.Context, nodeName string)) *MockClient_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetNode_Call) Return(_a0 slurmapi.Node, _a1 error) *MockClient_GetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetNode_Call) RunAndReturn(run func(context.Context, string) (slurmapi.Node, error)) *MockClient_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function with given fields: ctx
func (_m *MockClient) ListNodes(ctx context.Context) ([]slurmapi.Node, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []slurmapi.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]slurmapi.Node, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []slurmapi.Node); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slurmapi.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockClient_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) ListNodes(ctx interface{}) *MockClient_ListNodes_Call {
	return &MockClient_ListNodes_Call{Call: _e.mock.On("ListNodes", ctx)}
}

func (_c *MockClient_ListNodes_Call) Run(run func(ctx context.Context)) *MockClient_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_ListNodes_Call) Return(_a0 []slurmapi.Node, _a1 error) *MockClient_ListNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ListNodes_Call) RunAndReturn(run func(context.Context) ([]slurmapi.Node, error)) *MockClient_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041DeleteJobWithResponse provides a mock function with given fields: ctx, jobId, params, reqEditors
func (_m *MockClient) SlurmV0041DeleteJobWithResponse(ctx context.Context, jobId string, params *v0041.SlurmV0041DeleteJobParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteJobResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, jobId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041DeleteJobWithResponse")
	}

	var r0 *v0041.SlurmV0041DeleteJobResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmV0041DeleteJobParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteJobResponse, error)); ok {
		return rf(ctx, jobId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmV0041DeleteJobParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041DeleteJobResponse); ok {
		r0 = rf(ctx, jobId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041DeleteJobResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v0041.SlurmV0041DeleteJobParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, jobId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041DeleteJobWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041DeleteJobWithResponse'
type MockClient_SlurmV0041DeleteJobWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041DeleteJobWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - jobId string
//   - params *v0041.SlurmV0041DeleteJobParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041DeleteJobWithResponse(ctx interface{}, jobId interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041DeleteJobWithResponse_Call {
	return &MockClient_SlurmV0041DeleteJobWithResponse_Call{Call: _e.mock.On("SlurmV0041DeleteJobWithResponse",
		append([]interface{}{ctx, jobId, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041DeleteJobWithResponse_Call) Run(run func(ctx context.Context, jobId string, params *v0041.SlurmV0041DeleteJobParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041DeleteJobWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*v0041.SlurmV0041DeleteJobParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041DeleteJobWithResponse_Call) Return(_a0 *v0041.SlurmV0041DeleteJobResponse, _a1 error) *MockClient_SlurmV0041DeleteJobWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041DeleteJobWithResponse_Call) RunAndReturn(run func(context.Context, string, *v0041.SlurmV0041DeleteJobParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteJobResponse, error)) *MockClient_SlurmV0041DeleteJobWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041DeleteJobsWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClient) SlurmV0041DeleteJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteJobsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041DeleteJobsWithBodyWithResponse")
	}

	var r0 *v0041.SlurmV0041DeleteJobsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteJobsResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmV0041DeleteJobsResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041DeleteJobsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041DeleteJobsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041DeleteJobsWithBodyWithResponse'
type MockClient_SlurmV0041DeleteJobsWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041DeleteJobsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041DeleteJobsWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041DeleteJobsWithBodyWithResponse_Call {
	return &MockClient_SlurmV0041DeleteJobsWithBodyWithResponse_Call{Call: _e.mock.On("SlurmV0041DeleteJobsWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041DeleteJobsWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041DeleteJobsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041DeleteJobsWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmV0041DeleteJobsResponse, _a1 error) *MockClient_SlurmV0041DeleteJobsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041DeleteJobsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteJobsResponse, error)) *MockClient_SlurmV0041DeleteJobsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041DeleteJobsWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClient) SlurmV0041DeleteJobsWithResponse(ctx context.Context, body v0041.SlurmV0041DeleteJobsJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteJobsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041DeleteJobsWithResponse")
	}

	var r0 *v0041.SlurmV0041DeleteJobsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmV0041DeleteJobsJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteJobsResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmV0041DeleteJobsJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmV0041DeleteJobsResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041DeleteJobsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0041.SlurmV0041DeleteJobsJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041DeleteJobsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041DeleteJobsWithResponse'
type MockClient_SlurmV0041DeleteJobsWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041DeleteJobsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body v0041.SlurmV0041DeleteJobsJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041DeleteJobsWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041DeleteJobsWithResponse_Call {
	return &MockClient_SlurmV0041DeleteJobsWithResponse_Call{Call: _e.mock.On("SlurmV0041DeleteJobsWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041DeleteJobsWithResponse_Call) Run(run func(ctx context.Context, body v0041.SlurmV0041DeleteJobsJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041DeleteJobsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(v0041.SlurmV0041DeleteJobsJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041DeleteJobsWithResponse_Call) Return(_a0 *v0041.SlurmV0041DeleteJobsResponse, _a1 error) *MockClient_SlurmV0041DeleteJobsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041DeleteJobsWithResponse_Call) RunAndReturn(run func(context.Context, v0041.SlurmV0041DeleteJobsJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteJobsResponse, error)) *MockClient_SlurmV0041DeleteJobsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041DeleteNodeWithResponse provides a mock function with given fields: ctx, nodeName, reqEditors
func (_m *MockClient) SlurmV0041DeleteNodeWithResponse(ctx context.Context, nodeName string, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteNodeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, nodeName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041DeleteNodeWithResponse")
	}

	var r0 *v0041.SlurmV0041DeleteNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteNodeResponse, error)); ok {
		return rf(ctx, nodeName, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) *v0041.SlurmV0041DeleteNodeResponse); ok {
		r0 = rf(ctx, nodeName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041DeleteNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, nodeName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041DeleteNodeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041DeleteNodeWithResponse'
type MockClient_SlurmV0041DeleteNodeWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041DeleteNodeWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeName string
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041DeleteNodeWithResponse(ctx interface{}, nodeName interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041DeleteNodeWithResponse_Call {
	return &MockClient_SlurmV0041DeleteNodeWithResponse_Call{Call: _e.mock.On("SlurmV0041DeleteNodeWithResponse",
		append([]interface{}{ctx, nodeName}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041DeleteNodeWithResponse_Call) Run(run func(ctx context.Context, nodeName string, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041DeleteNodeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041DeleteNodeWithResponse_Call) Return(_a0 *v0041.SlurmV0041DeleteNodeResponse, _a1 error) *MockClient_SlurmV0041DeleteNodeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041DeleteNodeWithResponse_Call) RunAndReturn(run func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmV0041DeleteNodeResponse, error)) *MockClient_SlurmV0041DeleteNodeWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetDiagWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClient) SlurmV0041GetDiagWithResponse(ctx context.Context, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetDiagResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetDiagWithResponse")
	}

	var r0 *v0041.SlurmV0041GetDiagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetDiagResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetDiagResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetDiagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetDiagWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetDiagWithResponse'
type MockClient_SlurmV0041GetDiagWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetDiagWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetDiagWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetDiagWithResponse_Call {
	return &MockClient_SlurmV0041GetDiagWithResponse_Call{Call: _e.mock.On("SlurmV0041GetDiagWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetDiagWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetDiagWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetDiagWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetDiagResponse, _a1 error) *MockClient_SlurmV0041GetDiagWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetDiagWithResponse_Call) RunAndReturn(run func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetDiagResponse, error)) *MockClient_SlurmV0041GetDiagWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetJobWithResponse provides a mock function with given fields: ctx, jobId, params, reqEditors
func (_m *MockClient) SlurmV0041GetJobWithResponse(ctx context.Context, jobId string, params *v0041.SlurmV0041GetJobParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetJobResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, jobId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetJobWithResponse")
	}

	var r0 *v0041.SlurmV0041GetJobResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmV0041GetJobParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetJobResponse, error)); ok {
		return rf(ctx, jobId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmV0041GetJobParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetJobResponse); ok {
		r0 = rf(ctx, jobId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetJobResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v0041.SlurmV0041GetJobParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, jobId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetJobWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetJobWithResponse'
type MockClient_SlurmV0041GetJobWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetJobWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - jobId string
//   - params *v0041.SlurmV0041GetJobParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetJobWithResponse(ctx interface{}, jobId interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetJobWithResponse_Call {
	return &MockClient_SlurmV0041GetJobWithResponse_Call{Call: _e.mock.On("SlurmV0041GetJobWithResponse",
		append([]interface{}{ctx, jobId, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetJobWithResponse_Call) Run(run func(ctx context.Context, jobId string, params *v0041.SlurmV0041GetJobParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetJobWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*v0041.SlurmV0041GetJobParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetJobWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetJobResponse, _a1 error) *MockClient_SlurmV0041GetJobWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetJobWithResponse_Call) RunAndReturn(run func(context.Context, string, *v0041.SlurmV0041GetJobParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetJobResponse, error)) *MockClient_SlurmV0041GetJobWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetJobsStateWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmV0041GetJobsStateWithResponse(ctx context.Context, params *v0041.SlurmV0041GetJobsStateParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetJobsStateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetJobsStateWithResponse")
	}

	var r0 *v0041.SlurmV0041GetJobsStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetJobsStateParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetJobsStateResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetJobsStateParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetJobsStateResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetJobsStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmV0041GetJobsStateParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetJobsStateWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetJobsStateWithResponse'
type MockClient_SlurmV0041GetJobsStateWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetJobsStateWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmV0041GetJobsStateParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetJobsStateWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetJobsStateWithResponse_Call {
	return &MockClient_SlurmV0041GetJobsStateWithResponse_Call{Call: _e.mock.On("SlurmV0041GetJobsStateWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetJobsStateWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmV0041GetJobsStateParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetJobsStateWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmV0041GetJobsStateParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetJobsStateWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetJobsStateResponse, _a1 error) *MockClient_SlurmV0041GetJobsStateWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetJobsStateWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmV0041GetJobsStateParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetJobsStateResponse, error)) *MockClient_SlurmV0041GetJobsStateWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetJobsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmV0041GetJobsWithResponse(ctx context.Context, params *v0041.SlurmV0041GetJobsParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetJobsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetJobsWithResponse")
	}

	var r0 *v0041.SlurmV0041GetJobsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetJobsParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetJobsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetJobsParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetJobsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetJobsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmV0041GetJobsParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetJobsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetJobsWithResponse'
type MockClient_SlurmV0041GetJobsWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetJobsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmV0041GetJobsParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetJobsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetJobsWithResponse_Call {
	return &MockClient_SlurmV0041GetJobsWithResponse_Call{Call: _e.mock.On("SlurmV0041GetJobsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetJobsWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmV0041GetJobsParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetJobsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmV0041GetJobsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetJobsWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetJobsResponse, _a1 error) *MockClient_SlurmV0041GetJobsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetJobsWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmV0041GetJobsParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetJobsResponse, error)) *MockClient_SlurmV0041GetJobsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetLicensesWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClient) SlurmV0041GetLicensesWithResponse(ctx context.Context, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetLicensesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetLicensesWithResponse")
	}

	var r0 *v0041.SlurmV0041GetLicensesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetLicensesResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetLicensesResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetLicensesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetLicensesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetLicensesWithResponse'
type MockClient_SlurmV0041GetLicensesWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetLicensesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetLicensesWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetLicensesWithResponse_Call {
	return &MockClient_SlurmV0041GetLicensesWithResponse_Call{Call: _e.mock.On("SlurmV0041GetLicensesWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetLicensesWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetLicensesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetLicensesWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetLicensesResponse, _a1 error) *MockClient_SlurmV0041GetLicensesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetLicensesWithResponse_Call) RunAndReturn(run func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetLicensesResponse, error)) *MockClient_SlurmV0041GetLicensesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetNodeWithResponse provides a mock function with given fields: ctx, nodeName, params, reqEditors
func (_m *MockClient) SlurmV0041GetNodeWithResponse(ctx context.Context, nodeName string, params *v0041.SlurmV0041GetNodeParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetNodeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, nodeName, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetNodeWithResponse")
	}

	var r0 *v0041.SlurmV0041GetNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmV0041GetNodeParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetNodeResponse, error)); ok {
		return rf(ctx, nodeName, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmV0041GetNodeParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetNodeResponse); ok {
		r0 = rf(ctx, nodeName, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v0041.SlurmV0041GetNodeParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, nodeName, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetNodeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetNodeWithResponse'
type MockClient_SlurmV0041GetNodeWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetNodeWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeName string
//   - params *v0041.SlurmV0041GetNodeParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetNodeWithResponse(ctx interface{}, nodeName interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetNodeWithResponse_Call {
	return &MockClient_SlurmV0041GetNodeWithResponse_Call{Call: _e.mock.On("SlurmV0041GetNodeWithResponse",
		append([]interface{}{ctx, nodeName, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetNodeWithResponse_Call) Run(run func(ctx context.Context, nodeName string, params *v0041.SlurmV0041GetNodeParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetNodeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*v0041.SlurmV0041GetNodeParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetNodeWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetNodeResponse, _a1 error) *MockClient_SlurmV0041GetNodeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetNodeWithResponse_Call) RunAndReturn(run func(context.Context, string, *v0041.SlurmV0041GetNodeParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetNodeResponse, error)) *MockClient_SlurmV0041GetNodeWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetNodesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmV0041GetNodesWithResponse(ctx context.Context, params *v0041.SlurmV0041GetNodesParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetNodesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetNodesWithResponse")
	}

	var r0 *v0041.SlurmV0041GetNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetNodesParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetNodesResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetNodesParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetNodesResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmV0041GetNodesParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetNodesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetNodesWithResponse'
type MockClient_SlurmV0041GetNodesWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetNodesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmV0041GetNodesParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetNodesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetNodesWithResponse_Call {
	return &MockClient_SlurmV0041GetNodesWithResponse_Call{Call: _e.mock.On("SlurmV0041GetNodesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetNodesWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmV0041GetNodesParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetNodesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmV0041GetNodesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetNodesWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetNodesResponse, _a1 error) *MockClient_SlurmV0041GetNodesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetNodesWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmV0041GetNodesParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetNodesResponse, error)) *MockClient_SlurmV0041GetNodesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetPartitionWithResponse provides a mock function with given fields: ctx, partitionName, params, reqEditors
func (_m *MockClient) SlurmV0041GetPartitionWithResponse(ctx context.Context, partitionName string, params *v0041.SlurmV0041GetPartitionParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetPartitionResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, partitionName, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetPartitionWithResponse")
	}

	var r0 *v0041.SlurmV0041GetPartitionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmV0041GetPartitionParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetPartitionResponse, error)); ok {
		return rf(ctx, partitionName, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmV0041GetPartitionParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetPartitionResponse); ok {
		r0 = rf(ctx, partitionName, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetPartitionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v0041.SlurmV0041GetPartitionParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, partitionName, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetPartitionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetPartitionWithResponse'
type MockClient_SlurmV0041GetPartitionWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetPartitionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - partitionName string
//   - params *v0041.SlurmV0041GetPartitionParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetPartitionWithResponse(ctx interface{}, partitionName interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetPartitionWithResponse_Call {
	return &MockClient_SlurmV0041GetPartitionWithResponse_Call{Call: _e.mock.On("SlurmV0041GetPartitionWithResponse",
		append([]interface{}{ctx, partitionName, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetPartitionWithResponse_Call) Run(run func(ctx context.Context, partitionName string, params *v0041.SlurmV0041GetPartitionParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetPartitionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*v0041.SlurmV0041GetPartitionParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetPartitionWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetPartitionResponse, _a1 error) *MockClient_SlurmV0041GetPartitionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetPartitionWithResponse_Call) RunAndReturn(run func(context.Context, string, *v0041.SlurmV0041GetPartitionParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetPartitionResponse, error)) *MockClient_SlurmV0041GetPartitionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetPartitionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmV0041GetPartitionsWithResponse(ctx context.Context, params *v0041.SlurmV0041GetPartitionsParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetPartitionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetPartitionsWithResponse")
	}

	var r0 *v0041.SlurmV0041GetPartitionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetPartitionsParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetPartitionsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetPartitionsParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetPartitionsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetPartitionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmV0041GetPartitionsParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetPartitionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetPartitionsWithResponse'
type MockClient_SlurmV0041GetPartitionsWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetPartitionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmV0041GetPartitionsParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetPartitionsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetPartitionsWithResponse_Call {
	return &MockClient_SlurmV0041GetPartitionsWithResponse_Call{Call: _e.mock.On("SlurmV0041GetPartitionsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetPartitionsWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmV0041GetPartitionsParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetPartitionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmV0041GetPartitionsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetPartitionsWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetPartitionsResponse, _a1 error) *MockClient_SlurmV0041GetPartitionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetPartitionsWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmV0041GetPartitionsParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetPartitionsResponse, error)) *MockClient_SlurmV0041GetPartitionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetPingWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClient) SlurmV0041GetPingWithResponse(ctx context.Context, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetPingResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetPingWithResponse")
	}

	var r0 *v0041.SlurmV0041GetPingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetPingResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetPingResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetPingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetPingWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetPingWithResponse'
type MockClient_SlurmV0041GetPingWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetPingWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetPingWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetPingWithResponse_Call {
	return &MockClient_SlurmV0041GetPingWithResponse_Call{Call: _e.mock.On("SlurmV0041GetPingWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetPingWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetPingWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetPingWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetPingResponse, _a1 error) *MockClient_SlurmV0041GetPingWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetPingWithResponse_Call) RunAndReturn(run func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetPingResponse, error)) *MockClient_SlurmV0041GetPingWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetReconfigureWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClient) SlurmV0041GetReconfigureWithResponse(ctx context.Context, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetReconfigureResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetReconfigureWithResponse")
	}

	var r0 *v0041.SlurmV0041GetReconfigureResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetReconfigureResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetReconfigureResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetReconfigureResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetReconfigureWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetReconfigureWithResponse'
type MockClient_SlurmV0041GetReconfigureWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetReconfigureWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetReconfigureWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetReconfigureWithResponse_Call {
	return &MockClient_SlurmV0041GetReconfigureWithResponse_Call{Call: _e.mock.On("SlurmV0041GetReconfigureWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetReconfigureWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetReconfigureWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetReconfigureWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetReconfigureResponse, _a1 error) *MockClient_SlurmV0041GetReconfigureWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetReconfigureWithResponse_Call) RunAndReturn(run func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetReconfigureResponse, error)) *MockClient_SlurmV0041GetReconfigureWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetReservationWithResponse provides a mock function with given fields: ctx, reservationName, params, reqEditors
func (_m *MockClient) SlurmV0041GetReservationWithResponse(ctx context.Context, reservationName string, params *v0041.SlurmV0041GetReservationParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetReservationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, reservationName, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetReservationWithResponse")
	}

	var r0 *v0041.SlurmV0041GetReservationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmV0041GetReservationParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetReservationResponse, error)); ok {
		return rf(ctx, reservationName, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmV0041GetReservationParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetReservationResponse); ok {
		r0 = rf(ctx, reservationName, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetReservationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v0041.SlurmV0041GetReservationParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, reservationName, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetReservationWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetReservationWithResponse'
type MockClient_SlurmV0041GetReservationWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetReservationWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reservationName string
//   - params *v0041.SlurmV0041GetReservationParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetReservationWithResponse(ctx interface{}, reservationName interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetReservationWithResponse_Call {
	return &MockClient_SlurmV0041GetReservationWithResponse_Call{Call: _e.mock.On("SlurmV0041GetReservationWithResponse",
		append([]interface{}{ctx, reservationName, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetReservationWithResponse_Call) Run(run func(ctx context.Context, reservationName string, params *v0041.SlurmV0041GetReservationParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetReservationWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*v0041.SlurmV0041GetReservationParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetReservationWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetReservationResponse, _a1 error) *MockClient_SlurmV0041GetReservationWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetReservationWithResponse_Call) RunAndReturn(run func(context.Context, string, *v0041.SlurmV0041GetReservationParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetReservationResponse, error)) *MockClient_SlurmV0041GetReservationWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetReservationsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmV0041GetReservationsWithResponse(ctx context.Context, params *v0041.SlurmV0041GetReservationsParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetReservationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetReservationsWithResponse")
	}

	var r0 *v0041.SlurmV0041GetReservationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetReservationsParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetReservationsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetReservationsParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetReservationsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetReservationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmV0041GetReservationsParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetReservationsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetReservationsWithResponse'
type MockClient_SlurmV0041GetReservationsWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetReservationsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmV0041GetReservationsParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetReservationsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetReservationsWithResponse_Call {
	return &MockClient_SlurmV0041GetReservationsWithResponse_Call{Call: _e.mock.On("SlurmV0041GetReservationsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetReservationsWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmV0041GetReservationsParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetReservationsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmV0041GetReservationsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetReservationsWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetReservationsResponse, _a1 error) *MockClient_SlurmV0041GetReservationsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetReservationsWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmV0041GetReservationsParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetReservationsResponse, error)) *MockClient_SlurmV0041GetReservationsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041GetSharesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmV0041GetSharesWithResponse(ctx context.Context, params *v0041.SlurmV0041GetSharesParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetSharesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041GetSharesWithResponse")
	}

	var r0 *v0041.SlurmV0041GetSharesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetSharesParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetSharesResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmV0041GetSharesParams, ...v0041.RequestEditorFn) *v0041.SlurmV0041GetSharesResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041GetSharesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmV0041GetSharesParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041GetSharesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041GetSharesWithResponse'
type MockClient_SlurmV0041GetSharesWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041GetSharesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmV0041GetSharesParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041GetSharesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041GetSharesWithResponse_Call {
	return &MockClient_SlurmV0041GetSharesWithResponse_Call{Call: _e.mock.On("SlurmV0041GetSharesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041GetSharesWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmV0041GetSharesParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041GetSharesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmV0041GetSharesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041GetSharesWithResponse_Call) Return(_a0 *v0041.SlurmV0041GetSharesResponse, _a1 error) *MockClient_SlurmV0041GetSharesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041GetSharesWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmV0041GetSharesParams, ...v0041.RequestEditorFn) (*v0041.SlurmV0041GetSharesResponse, error)) *MockClient_SlurmV0041GetSharesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041PostJobAllocateWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClient) SlurmV0041PostJobAllocateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobAllocateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041PostJobAllocateWithBodyWithResponse")
	}

	var r0 *v0041.SlurmV0041PostJobAllocateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobAllocateResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmV0041PostJobAllocateResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041PostJobAllocateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041PostJobAllocateWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041PostJobAllocateWithBodyWithResponse'
type MockClient_SlurmV0041PostJobAllocateWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041PostJobAllocateWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041PostJobAllocateWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041PostJobAllocateWithBodyWithResponse_Call {
	return &MockClient_SlurmV0041PostJobAllocateWithBodyWithResponse_Call{Call: _e.mock.On("SlurmV0041PostJobAllocateWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041PostJobAllocateWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041PostJobAllocateWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041PostJobAllocateWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmV0041PostJobAllocateResponse, _a1 error) *MockClient_SlurmV0041PostJobAllocateWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041PostJobAllocateWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobAllocateResponse, error)) *MockClient_SlurmV0041PostJobAllocateWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041PostJobAllocateWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClient) SlurmV0041PostJobAllocateWithResponse(ctx context.Context, body v0041.SlurmV0041PostJobAllocateJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobAllocateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041PostJobAllocateWithResponse")
	}

	var r0 *v0041.SlurmV0041PostJobAllocateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmV0041PostJobAllocateJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobAllocateResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmV0041PostJobAllocateJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmV0041PostJobAllocateResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041PostJobAllocateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0041.SlurmV0041PostJobAllocateJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041PostJobAllocateWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041PostJobAllocateWithResponse'
type MockClient_SlurmV0041PostJobAllocateWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041PostJobAllocateWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body v0041.SlurmV0041PostJobAllocateJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041PostJobAllocateWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041PostJobAllocateWithResponse_Call {
	return &MockClient_SlurmV0041PostJobAllocateWithResponse_Call{Call: _e.mock.On("SlurmV0041PostJobAllocateWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041PostJobAllocateWithResponse_Call) Run(run func(ctx context.Context, body v0041.SlurmV0041PostJobAllocateJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041PostJobAllocateWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(v0041.SlurmV0041PostJobAllocateJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041PostJobAllocateWithResponse_Call) Return(_a0 *v0041.SlurmV0041PostJobAllocateResponse, _a1 error) *MockClient_SlurmV0041PostJobAllocateWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041PostJobAllocateWithResponse_Call) RunAndReturn(run func(context.Context, v0041.SlurmV0041PostJobAllocateJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobAllocateResponse, error)) *MockClient_SlurmV0041PostJobAllocateWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041PostJobSubmitWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClient) SlurmV0041PostJobSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobSubmitResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041PostJobSubmitWithBodyWithResponse")
	}

	var r0 *v0041.SlurmV0041PostJobSubmitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobSubmitResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmV0041PostJobSubmitResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041PostJobSubmitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041PostJobSubmitWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041PostJobSubmitWithBodyWithResponse'
type MockClient_SlurmV0041PostJobSubmitWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041PostJobSubmitWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041PostJobSubmitWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041PostJobSubmitWithBodyWithResponse_Call {
	return &MockClient_SlurmV0041PostJobSubmitWithBodyWithResponse_Call{Call: _e.mock.On("SlurmV0041PostJobSubmitWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041PostJobSubmitWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041PostJobSubmitWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041PostJobSubmitWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmV0041PostJobSubmitResponse, _a1 error) *MockClient_SlurmV0041PostJobSubmitWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041PostJobSubmitWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobSubmitResponse, error)) *MockClient_SlurmV0041PostJobSubmitWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041PostJobSubmitWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClient) SlurmV0041PostJobSubmitWithResponse(ctx context.Context, body v0041.SlurmV0041PostJobSubmitJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobSubmitResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041PostJobSubmitWithResponse")
	}

	var r0 *v0041.SlurmV0041PostJobSubmitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmV0041PostJobSubmitJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobSubmitResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmV0041PostJobSubmitJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmV0041PostJobSubmitResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041PostJobSubmitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0041.SlurmV0041PostJobSubmitJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041PostJobSubmitWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041PostJobSubmitWithResponse'
type MockClient_SlurmV0041PostJobSubmitWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041PostJobSubmitWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body v0041.SlurmV0041PostJobSubmitJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041PostJobSubmitWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041PostJobSubmitWithResponse_Call {
	return &MockClient_SlurmV0041PostJobSubmitWithResponse_Call{Call: _e.mock.On("SlurmV0041PostJobSubmitWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041PostJobSubmitWithResponse_Call) Run(run func(ctx context.Context, body v0041.SlurmV0041PostJobSubmitJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041PostJobSubmitWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(v0041.SlurmV0041PostJobSubmitJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041PostJobSubmitWithResponse_Call) Return(_a0 *v0041.SlurmV0041PostJobSubmitResponse, _a1 error) *MockClient_SlurmV0041PostJobSubmitWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041PostJobSubmitWithResponse_Call) RunAndReturn(run func(context.Context, v0041.SlurmV0041PostJobSubmitJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobSubmitResponse, error)) *MockClient_SlurmV0041PostJobSubmitWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041PostJobWithBodyWithResponse provides a mock function with given fields: ctx, jobId, contentType, body, reqEditors
func (_m *MockClient) SlurmV0041PostJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, jobId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041PostJobWithBodyWithResponse")
	}

	var r0 *v0041.SlurmV0041PostJobResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobResponse, error)); ok {
		return rf(ctx, jobId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmV0041PostJobResponse); ok {
		r0 = rf(ctx, jobId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041PostJobResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, jobId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041PostJobWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041PostJobWithBodyWithResponse'
type MockClient_SlurmV0041PostJobWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041PostJobWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - jobId string
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041PostJobWithBodyWithResponse(ctx interface{}, jobId interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041PostJobWithBodyWithResponse_Call {
	return &MockClient_SlurmV0041PostJobWithBodyWithResponse_Call{Call: _e.mock.On("SlurmV0041PostJobWithBodyWithResponse",
		append([]interface{}{ctx, jobId, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041PostJobWithBodyWithResponse_Call) Run(run func(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041PostJobWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041PostJobWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmV0041PostJobResponse, _a1 error) *MockClient_SlurmV0041PostJobWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041PostJobWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobResponse, error)) *MockClient_SlurmV0041PostJobWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041PostJobWithResponse provides a mock function with given fields: ctx, jobId, body, reqEditors
func (_m *MockClient) SlurmV0041PostJobWithResponse(ctx context.Context, jobId string, body v0041.SlurmV0041PostJobJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, jobId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041PostJobWithResponse")
	}

	var r0 *v0041.SlurmV0041PostJobResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v0041.SlurmV0041PostJobJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobResponse, error)); ok {
		return rf(ctx, jobId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, v0041.SlurmV0041PostJobJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmV0041PostJobResponse); ok {
		r0 = rf(ctx, jobId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041PostJobResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, v0041.SlurmV0041PostJobJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, jobId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041PostJobWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041PostJobWithResponse'
type MockClient_SlurmV0041PostJobWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041PostJobWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - jobId string
//   - body v0041.SlurmV0041PostJobJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041PostJobWithResponse(ctx interface{}, jobId interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041PostJobWithResponse_Call {
	return &MockClient_SlurmV0041PostJobWithResponse_Call{Call: _e.mock.On("SlurmV0041PostJobWithResponse",
		append([]interface{}{ctx, jobId, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041PostJobWithResponse_Call) Run(run func(ctx context.Context, jobId string, body v0041.SlurmV0041PostJobJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041PostJobWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(v0041.SlurmV0041PostJobJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041PostJobWithResponse_Call) Return(_a0 *v0041.SlurmV0041PostJobResponse, _a1 error) *MockClient_SlurmV0041PostJobWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041PostJobWithResponse_Call) RunAndReturn(run func(context.Context, string, v0041.SlurmV0041PostJobJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostJobResponse, error)) *MockClient_SlurmV0041PostJobWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041PostNodeWithBodyWithResponse provides a mock function with given fields: ctx, nodeName, contentType, body, reqEditors
func (_m *MockClient) SlurmV0041PostNodeWithBodyWithResponse(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostNodeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, nodeName, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041PostNodeWithBodyWithResponse")
	}

	var r0 *v0041.SlurmV0041PostNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostNodeResponse, error)); ok {
		return rf(ctx, nodeName, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmV0041PostNodeResponse); ok {
		r0 = rf(ctx, nodeName, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041PostNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, nodeName, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041PostNodeWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041PostNodeWithBodyWithResponse'
type MockClient_SlurmV0041PostNodeWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041PostNodeWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeName string
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041PostNodeWithBodyWithResponse(ctx interface{}, nodeName interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041PostNodeWithBodyWithResponse_Call {
	return &MockClient_SlurmV0041PostNodeWithBodyWithResponse_Call{Call: _e.mock.On("SlurmV0041PostNodeWithBodyWithResponse",
		append([]interface{}{ctx, nodeName, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041PostNodeWithBodyWithResponse_Call) Run(run func(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041PostNodeWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041PostNodeWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmV0041PostNodeResponse, _a1 error) *MockClient_SlurmV0041PostNodeWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041PostNodeWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostNodeResponse, error)) *MockClient_SlurmV0041PostNodeWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmV0041PostNodeWithResponse provides a mock function with given fields: ctx, nodeName, body, reqEditors
func (_m *MockClient) SlurmV0041PostNodeWithResponse(ctx context.Context, nodeName string, body v0041.SlurmV0041PostNodeJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostNodeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, nodeName, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmV0041PostNodeWithResponse")
	}

	var r0 *v0041.SlurmV0041PostNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v0041.SlurmV0041PostNodeJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostNodeResponse, error)); ok {
		return rf(ctx, nodeName, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, v0041.SlurmV0041PostNodeJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmV0041PostNodeResponse); ok {
		r0 = rf(ctx, nodeName, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmV0041PostNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, v0041.SlurmV0041PostNodeJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, nodeName, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmV0041PostNodeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmV0041PostNodeWithResponse'
type MockClient_SlurmV0041PostNodeWithResponse_Call struct {
	*mock.Call
}

// SlurmV0041PostNodeWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeName string
//   - body v0041.SlurmV0041PostNodeJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmV0041PostNodeWithResponse(ctx interface{}, nodeName interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmV0041PostNodeWithResponse_Call {
	return &MockClient_SlurmV0041PostNodeWithResponse_Call{Call: _e.mock.On("SlurmV0041PostNodeWithResponse",
		append([]interface{}{ctx, nodeName, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmV0041PostNodeWithResponse_Call) Run(run func(ctx context.Context, nodeName string, body v0041.SlurmV0041PostNodeJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmV0041PostNodeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(v0041.SlurmV0041PostNodeJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmV0041PostNodeWithResponse_Call) Return(_a0 *v0041.SlurmV0041PostNodeResponse, _a1 error) *MockClient_SlurmV0041PostNodeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmV0041PostNodeWithResponse_Call) RunAndReturn(run func(context.Context, string, v0041.SlurmV0041PostNodeJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmV0041PostNodeResponse, error)) *MockClient_SlurmV0041PostNodeWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041DeleteAccountWithResponse provides a mock function with given fields: ctx, accountName, reqEditors
func (_m *MockClient) SlurmdbV0041DeleteAccountWithResponse(ctx context.Context, accountName string, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteAccountResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041DeleteAccountWithResponse")
	}

	var r0 *v0041.SlurmdbV0041DeleteAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteAccountResponse, error)); ok {
		return rf(ctx, accountName, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041DeleteAccountResponse); ok {
		r0 = rf(ctx, accountName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041DeleteAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, accountName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041DeleteAccountWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041DeleteAccountWithResponse'
type MockClient_SlurmdbV0041DeleteAccountWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041DeleteAccountWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - accountName string
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041DeleteAccountWithResponse(ctx interface{}, accountName interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041DeleteAccountWithResponse_Call {
	return &MockClient_SlurmdbV0041DeleteAccountWithResponse_Call{Call: _e.mock.On("SlurmdbV0041DeleteAccountWithResponse",
		append([]interface{}{ctx, accountName}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041DeleteAccountWithResponse_Call) Run(run func(ctx context.Context, accountName string, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041DeleteAccountWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteAccountWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041DeleteAccountResponse, _a1 error) *MockClient_SlurmdbV0041DeleteAccountWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteAccountWithResponse_Call) RunAndReturn(run func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteAccountResponse, error)) *MockClient_SlurmdbV0041DeleteAccountWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041DeleteAssociationWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041DeleteAssociationWithResponse(ctx context.Context, params *v0041.SlurmdbV0041DeleteAssociationParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteAssociationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041DeleteAssociationWithResponse")
	}

	var r0 *v0041.SlurmdbV0041DeleteAssociationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041DeleteAssociationParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteAssociationResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041DeleteAssociationParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041DeleteAssociationResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041DeleteAssociationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041DeleteAssociationParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041DeleteAssociationWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041DeleteAssociationWithResponse'
type MockClient_SlurmdbV0041DeleteAssociationWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041DeleteAssociationWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041DeleteAssociationParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041DeleteAssociationWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041DeleteAssociationWithResponse_Call {
	return &MockClient_SlurmdbV0041DeleteAssociationWithResponse_Call{Call: _e.mock.On("SlurmdbV0041DeleteAssociationWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041DeleteAssociationWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041DeleteAssociationParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041DeleteAssociationWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041DeleteAssociationParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteAssociationWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041DeleteAssociationResponse, _a1 error) *MockClient_SlurmdbV0041DeleteAssociationWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteAssociationWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041DeleteAssociationParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteAssociationResponse, error)) *MockClient_SlurmdbV0041DeleteAssociationWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041DeleteAssociationsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041DeleteAssociationsWithResponse(ctx context.Context, params *v0041.SlurmdbV0041DeleteAssociationsParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteAssociationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041DeleteAssociationsWithResponse")
	}

	var r0 *v0041.SlurmdbV0041DeleteAssociationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041DeleteAssociationsParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteAssociationsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041DeleteAssociationsParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041DeleteAssociationsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041DeleteAssociationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041DeleteAssociationsParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041DeleteAssociationsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041DeleteAssociationsWithResponse'
type MockClient_SlurmdbV0041DeleteAssociationsWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041DeleteAssociationsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041DeleteAssociationsParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041DeleteAssociationsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041DeleteAssociationsWithResponse_Call {
	return &MockClient_SlurmdbV0041DeleteAssociationsWithResponse_Call{Call: _e.mock.On("SlurmdbV0041DeleteAssociationsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041DeleteAssociationsWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041DeleteAssociationsParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041DeleteAssociationsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041DeleteAssociationsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteAssociationsWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041DeleteAssociationsResponse, _a1 error) *MockClient_SlurmdbV0041DeleteAssociationsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteAssociationsWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041DeleteAssociationsParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteAssociationsResponse, error)) *MockClient_SlurmdbV0041DeleteAssociationsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041DeleteClusterWithResponse provides a mock function with given fields: ctx, clusterName, params, reqEditors
func (_m *MockClient) SlurmdbV0041DeleteClusterWithResponse(ctx context.Context, clusterName string, params *v0041.SlurmdbV0041DeleteClusterParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterName, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041DeleteClusterWithResponse")
	}

	var r0 *v0041.SlurmdbV0041DeleteClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmdbV0041DeleteClusterParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteClusterResponse, error)); ok {
		return rf(ctx, clusterName, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmdbV0041DeleteClusterParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041DeleteClusterResponse); ok {
		r0 = rf(ctx, clusterName, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041DeleteClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v0041.SlurmdbV0041DeleteClusterParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterName, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041DeleteClusterWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041DeleteClusterWithResponse'
type MockClient_SlurmdbV0041DeleteClusterWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041DeleteClusterWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
//   - params *v0041.SlurmdbV0041DeleteClusterParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041DeleteClusterWithResponse(ctx interface{}, clusterName interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041DeleteClusterWithResponse_Call {
	return &MockClient_SlurmdbV0041DeleteClusterWithResponse_Call{Call: _e.mock.On("SlurmdbV0041DeleteClusterWithResponse",
		append([]interface{}{ctx, clusterName, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041DeleteClusterWithResponse_Call) Run(run func(ctx context.Context, clusterName string, params *v0041.SlurmdbV0041DeleteClusterParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041DeleteClusterWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*v0041.SlurmdbV0041DeleteClusterParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteClusterWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041DeleteClusterResponse, _a1 error) *MockClient_SlurmdbV0041DeleteClusterWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteClusterWithResponse_Call) RunAndReturn(run func(context.Context, string, *v0041.SlurmdbV0041DeleteClusterParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteClusterResponse, error)) *MockClient_SlurmdbV0041DeleteClusterWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041DeleteSingleQosWithResponse provides a mock function with given fields: ctx, qos, reqEditors
func (_m *MockClient) SlurmdbV0041DeleteSingleQosWithResponse(ctx context.Context, qos string, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteSingleQosResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, qos)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041DeleteSingleQosWithResponse")
	}

	var r0 *v0041.SlurmdbV0041DeleteSingleQosResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteSingleQosResponse, error)); ok {
		return rf(ctx, qos, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041DeleteSingleQosResponse); ok {
		r0 = rf(ctx, qos, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041DeleteSingleQosResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, qos, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041DeleteSingleQosWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041DeleteSingleQosWithResponse'
type MockClient_SlurmdbV0041DeleteSingleQosWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041DeleteSingleQosWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - qos string
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041DeleteSingleQosWithResponse(ctx interface{}, qos interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041DeleteSingleQosWithResponse_Call {
	return &MockClient_SlurmdbV0041DeleteSingleQosWithResponse_Call{Call: _e.mock.On("SlurmdbV0041DeleteSingleQosWithResponse",
		append([]interface{}{ctx, qos}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041DeleteSingleQosWithResponse_Call) Run(run func(ctx context.Context, qos string, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041DeleteSingleQosWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteSingleQosWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041DeleteSingleQosResponse, _a1 error) *MockClient_SlurmdbV0041DeleteSingleQosWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteSingleQosWithResponse_Call) RunAndReturn(run func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteSingleQosResponse, error)) *MockClient_SlurmdbV0041DeleteSingleQosWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041DeleteUserWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *MockClient) SlurmdbV0041DeleteUserWithResponse(ctx context.Context, name string, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041DeleteUserWithResponse")
	}

	var r0 *v0041.SlurmdbV0041DeleteUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteUserResponse, error)); ok {
		return rf(ctx, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041DeleteUserResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041DeleteUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041DeleteUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041DeleteUserWithResponse'
type MockClient_SlurmdbV0041DeleteUserWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041DeleteUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041DeleteUserWithResponse(ctx interface{}, name interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041DeleteUserWithResponse_Call {
	return &MockClient_SlurmdbV0041DeleteUserWithResponse_Call{Call: _e.mock.On("SlurmdbV0041DeleteUserWithResponse",
		append([]interface{}{ctx, name}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041DeleteUserWithResponse_Call) Run(run func(ctx context.Context, name string, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041DeleteUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteUserWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041DeleteUserResponse, _a1 error) *MockClient_SlurmdbV0041DeleteUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteUserWithResponse_Call) RunAndReturn(run func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteUserResponse, error)) *MockClient_SlurmdbV0041DeleteUserWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041DeleteWckeyWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *MockClient) SlurmdbV0041DeleteWckeyWithResponse(ctx context.Context, id string, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteWckeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041DeleteWckeyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041DeleteWckeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteWckeyResponse, error)); ok {
		return rf(ctx, id, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041DeleteWckeyResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041DeleteWckeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041DeleteWckeyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041DeleteWckeyWithResponse'
type MockClient_SlurmdbV0041DeleteWckeyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041DeleteWckeyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041DeleteWckeyWithResponse(ctx interface{}, id interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041DeleteWckeyWithResponse_Call {
	return &MockClient_SlurmdbV0041DeleteWckeyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041DeleteWckeyWithResponse",
		append([]interface{}{ctx, id}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041DeleteWckeyWithResponse_Call) Run(run func(ctx context.Context, id string, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041DeleteWckeyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteWckeyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041DeleteWckeyResponse, _a1 error) *MockClient_SlurmdbV0041DeleteWckeyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041DeleteWckeyWithResponse_Call) RunAndReturn(run func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041DeleteWckeyResponse, error)) *MockClient_SlurmdbV0041DeleteWckeyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetAccountWithResponse provides a mock function with given fields: ctx, accountName, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetAccountWithResponse(ctx context.Context, accountName string, params *v0041.SlurmdbV0041GetAccountParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAccountResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountName, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetAccountWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmdbV0041GetAccountParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAccountResponse, error)); ok {
		return rf(ctx, accountName, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmdbV0041GetAccountParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetAccountResponse); ok {
		r0 = rf(ctx, accountName, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v0041.SlurmdbV0041GetAccountParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, accountName, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetAccountWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetAccountWithResponse'
type MockClient_SlurmdbV0041GetAccountWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetAccountWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - accountName string
//   - params *v0041.SlurmdbV0041GetAccountParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetAccountWithResponse(ctx interface{}, accountName interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetAccountWithResponse_Call {
	return &MockClient_SlurmdbV0041GetAccountWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetAccountWithResponse",
		append([]interface{}{ctx, accountName, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetAccountWithResponse_Call) Run(run func(ctx context.Context, accountName string, params *v0041.SlurmdbV0041GetAccountParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetAccountWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*v0041.SlurmdbV0041GetAccountParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetAccountWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetAccountResponse, _a1 error) *MockClient_SlurmdbV0041GetAccountWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetAccountWithResponse_Call) RunAndReturn(run func(context.Context, string, *v0041.SlurmdbV0041GetAccountParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAccountResponse, error)) *MockClient_SlurmdbV0041GetAccountWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetAccountsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetAccountsWithResponse(ctx context.Context, params *v0041.SlurmdbV0041GetAccountsParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAccountsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetAccountsWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetAccountsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetAccountsParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAccountsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetAccountsParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetAccountsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetAccountsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041GetAccountsParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetAccountsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetAccountsWithResponse'
type MockClient_SlurmdbV0041GetAccountsWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetAccountsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041GetAccountsParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetAccountsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetAccountsWithResponse_Call {
	return &MockClient_SlurmdbV0041GetAccountsWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetAccountsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetAccountsWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041GetAccountsParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetAccountsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041GetAccountsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetAccountsWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetAccountsResponse, _a1 error) *MockClient_SlurmdbV0041GetAccountsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetAccountsWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041GetAccountsParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAccountsResponse, error)) *MockClient_SlurmdbV0041GetAccountsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetAssociationWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetAssociationWithResponse(ctx context.Context, params *v0041.SlurmdbV0041GetAssociationParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAssociationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetAssociationWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetAssociationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetAssociationParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAssociationResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetAssociationParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetAssociationResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetAssociationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041GetAssociationParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetAssociationWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetAssociationWithResponse'
type MockClient_SlurmdbV0041GetAssociationWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetAssociationWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041GetAssociationParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetAssociationWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetAssociationWithResponse_Call {
	return &MockClient_SlurmdbV0041GetAssociationWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetAssociationWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetAssociationWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041GetAssociationParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetAssociationWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041GetAssociationParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetAssociationWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetAssociationResponse, _a1 error) *MockClient_SlurmdbV0041GetAssociationWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetAssociationWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041GetAssociationParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAssociationResponse, error)) *MockClient_SlurmdbV0041GetAssociationWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetAssociationsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetAssociationsWithResponse(ctx context.Context, params *v0041.SlurmdbV0041GetAssociationsParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAssociationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetAssociationsWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetAssociationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetAssociationsParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAssociationsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetAssociationsParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetAssociationsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetAssociationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041GetAssociationsParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetAssociationsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetAssociationsWithResponse'
type MockClient_SlurmdbV0041GetAssociationsWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetAssociationsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041GetAssociationsParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetAssociationsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetAssociationsWithResponse_Call {
	return &MockClient_SlurmdbV0041GetAssociationsWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetAssociationsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetAssociationsWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041GetAssociationsParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetAssociationsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041GetAssociationsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetAssociationsWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetAssociationsResponse, _a1 error) *MockClient_SlurmdbV0041GetAssociationsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetAssociationsWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041GetAssociationsParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetAssociationsResponse, error)) *MockClient_SlurmdbV0041GetAssociationsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetClusterWithResponse provides a mock function with given fields: ctx, clusterName, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetClusterWithResponse(ctx context.Context, clusterName string, params *v0041.SlurmdbV0041GetClusterParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, clusterName, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetClusterWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmdbV0041GetClusterParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetClusterResponse, error)); ok {
		return rf(ctx, clusterName, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmdbV0041GetClusterParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetClusterResponse); ok {
		r0 = rf(ctx, clusterName, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v0041.SlurmdbV0041GetClusterParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, clusterName, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetClusterWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetClusterWithResponse'
type MockClient_SlurmdbV0041GetClusterWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetClusterWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
//   - params *v0041.SlurmdbV0041GetClusterParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetClusterWithResponse(ctx interface{}, clusterName interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetClusterWithResponse_Call {
	return &MockClient_SlurmdbV0041GetClusterWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetClusterWithResponse",
		append([]interface{}{ctx, clusterName, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetClusterWithResponse_Call) Run(run func(ctx context.Context, clusterName string, params *v0041.SlurmdbV0041GetClusterParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetClusterWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*v0041.SlurmdbV0041GetClusterParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetClusterWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetClusterResponse, _a1 error) *MockClient_SlurmdbV0041GetClusterWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetClusterWithResponse_Call) RunAndReturn(run func(context.Context, string, *v0041.SlurmdbV0041GetClusterParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetClusterResponse, error)) *MockClient_SlurmdbV0041GetClusterWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetClustersWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetClustersWithResponse(ctx context.Context, params *v0041.SlurmdbV0041GetClustersParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetClustersWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetClustersParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetClustersResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetClustersParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetClustersResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041GetClustersParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetClustersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetClustersWithResponse'
type MockClient_SlurmdbV0041GetClustersWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetClustersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041GetClustersParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetClustersWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetClustersWithResponse_Call {
	return &MockClient_SlurmdbV0041GetClustersWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetClustersWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetClustersWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041GetClustersParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetClustersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041GetClustersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetClustersWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetClustersResponse, _a1 error) *MockClient_SlurmdbV0041GetClustersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetClustersWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041GetClustersParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetClustersResponse, error)) *MockClient_SlurmdbV0041GetClustersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetConfigWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClient) SlurmdbV0041GetConfigWithResponse(ctx context.Context, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetConfigWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetConfigResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetConfigResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetConfigWithResponse'
type MockClient_SlurmdbV0041GetConfigWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetConfigWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetConfigWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetConfigWithResponse_Call {
	return &MockClient_SlurmdbV0041GetConfigWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetConfigWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetConfigWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetConfigWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetConfigResponse, _a1 error) *MockClient_SlurmdbV0041GetConfigWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetConfigWithResponse_Call) RunAndReturn(run func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetConfigResponse, error)) *MockClient_SlurmdbV0041GetConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetDiagWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClient) SlurmdbV0041GetDiagWithResponse(ctx context.Context, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetDiagResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetDiagWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetDiagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetDiagResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetDiagResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetDiagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetDiagWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetDiagWithResponse'
type MockClient_SlurmdbV0041GetDiagWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetDiagWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetDiagWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetDiagWithResponse_Call {
	return &MockClient_SlurmdbV0041GetDiagWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetDiagWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetDiagWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetDiagWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetDiagWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetDiagResponse, _a1 error) *MockClient_SlurmdbV0041GetDiagWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetDiagWithResponse_Call) RunAndReturn(run func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetDiagResponse, error)) *MockClient_SlurmdbV0041GetDiagWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetInstanceWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetInstanceWithResponse(ctx context.Context, params *v0041.SlurmdbV0041GetInstanceParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetInstanceWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetInstanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetInstanceParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetInstanceResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetInstanceParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetInstanceResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetInstanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041GetInstanceParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetInstanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetInstanceWithResponse'
type MockClient_SlurmdbV0041GetInstanceWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetInstanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041GetInstanceParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetInstanceWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetInstanceWithResponse_Call {
	return &MockClient_SlurmdbV0041GetInstanceWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetInstanceWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetInstanceWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041GetInstanceParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetInstanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041GetInstanceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetInstanceWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetInstanceResponse, _a1 error) *MockClient_SlurmdbV0041GetInstanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetInstanceWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041GetInstanceParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetInstanceResponse, error)) *MockClient_SlurmdbV0041GetInstanceWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetInstancesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetInstancesWithResponse(ctx context.Context, params *v0041.SlurmdbV0041GetInstancesParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetInstancesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetInstancesWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetInstancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetInstancesParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetInstancesResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetInstancesParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetInstancesResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetInstancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041GetInstancesParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetInstancesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetInstancesWithResponse'
type MockClient_SlurmdbV0041GetInstancesWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetInstancesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041GetInstancesParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetInstancesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetInstancesWithResponse_Call {
	return &MockClient_SlurmdbV0041GetInstancesWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetInstancesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetInstancesWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041GetInstancesParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetInstancesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041GetInstancesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetInstancesWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetInstancesResponse, _a1 error) *MockClient_SlurmdbV0041GetInstancesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetInstancesWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041GetInstancesParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetInstancesResponse, error)) *MockClient_SlurmdbV0041GetInstancesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetJobWithResponse provides a mock function with given fields: ctx, jobId, reqEditors
func (_m *MockClient) SlurmdbV0041GetJobWithResponse(ctx context.Context, jobId string, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetJobResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, jobId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetJobWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetJobResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetJobResponse, error)); ok {
		return rf(ctx, jobId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetJobResponse); ok {
		r0 = rf(ctx, jobId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetJobResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, jobId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetJobWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetJobWithResponse'
type MockClient_SlurmdbV0041GetJobWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetJobWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - jobId string
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetJobWithResponse(ctx interface{}, jobId interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetJobWithResponse_Call {
	return &MockClient_SlurmdbV0041GetJobWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetJobWithResponse",
		append([]interface{}{ctx, jobId}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetJobWithResponse_Call) Run(run func(ctx context.Context, jobId string, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetJobWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetJobWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetJobResponse, _a1 error) *MockClient_SlurmdbV0041GetJobWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetJobWithResponse_Call) RunAndReturn(run func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetJobResponse, error)) *MockClient_SlurmdbV0041GetJobWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetJobsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetJobsWithResponse(ctx context.Context, params *v0041.SlurmdbV0041GetJobsParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetJobsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetJobsWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetJobsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetJobsParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetJobsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetJobsParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetJobsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetJobsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041GetJobsParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetJobsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetJobsWithResponse'
type MockClient_SlurmdbV0041GetJobsWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetJobsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041GetJobsParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetJobsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetJobsWithResponse_Call {
	return &MockClient_SlurmdbV0041GetJobsWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetJobsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetJobsWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041GetJobsParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetJobsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041GetJobsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetJobsWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetJobsResponse, _a1 error) *MockClient_SlurmdbV0041GetJobsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetJobsWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041GetJobsParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetJobsResponse, error)) *MockClient_SlurmdbV0041GetJobsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetQosWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetQosWithResponse(ctx context.Context, params *v0041.SlurmdbV0041GetQosParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetQosResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetQosWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetQosResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetQosParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetQosResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetQosParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetQosResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetQosResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041GetQosParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetQosWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetQosWithResponse'
type MockClient_SlurmdbV0041GetQosWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetQosWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041GetQosParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetQosWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetQosWithResponse_Call {
	return &MockClient_SlurmdbV0041GetQosWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetQosWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetQosWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041GetQosParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetQosWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041GetQosParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetQosWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetQosResponse, _a1 error) *MockClient_SlurmdbV0041GetQosWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetQosWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041GetQosParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetQosResponse, error)) *MockClient_SlurmdbV0041GetQosWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetSingleQosWithResponse provides a mock function with given fields: ctx, qos, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetSingleQosWithResponse(ctx context.Context, qos string, params *v0041.SlurmdbV0041GetSingleQosParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetSingleQosResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, qos, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetSingleQosWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetSingleQosResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmdbV0041GetSingleQosParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetSingleQosResponse, error)); ok {
		return rf(ctx, qos, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmdbV0041GetSingleQosParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetSingleQosResponse); ok {
		r0 = rf(ctx, qos, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetSingleQosResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v0041.SlurmdbV0041GetSingleQosParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, qos, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetSingleQosWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetSingleQosWithResponse'
type MockClient_SlurmdbV0041GetSingleQosWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetSingleQosWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - qos string
//   - params *v0041.SlurmdbV0041GetSingleQosParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetSingleQosWithResponse(ctx interface{}, qos interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetSingleQosWithResponse_Call {
	return &MockClient_SlurmdbV0041GetSingleQosWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetSingleQosWithResponse",
		append([]interface{}{ctx, qos, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetSingleQosWithResponse_Call) Run(run func(ctx context.Context, qos string, params *v0041.SlurmdbV0041GetSingleQosParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetSingleQosWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*v0041.SlurmdbV0041GetSingleQosParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetSingleQosWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetSingleQosResponse, _a1 error) *MockClient_SlurmdbV0041GetSingleQosWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetSingleQosWithResponse_Call) RunAndReturn(run func(context.Context, string, *v0041.SlurmdbV0041GetSingleQosParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetSingleQosResponse, error)) *MockClient_SlurmdbV0041GetSingleQosWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetTresWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *MockClient) SlurmdbV0041GetTresWithResponse(ctx context.Context, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetTresResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetTresWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetTresResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetTresResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetTresResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetTresResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetTresWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetTresWithResponse'
type MockClient_SlurmdbV0041GetTresWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetTresWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetTresWithResponse(ctx interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetTresWithResponse_Call {
	return &MockClient_SlurmdbV0041GetTresWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetTresWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetTresWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetTresWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetTresWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetTresResponse, _a1 error) *MockClient_SlurmdbV0041GetTresWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetTresWithResponse_Call) RunAndReturn(run func(context.Context, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetTresResponse, error)) *MockClient_SlurmdbV0041GetTresWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetUserWithResponse provides a mock function with given fields: ctx, name, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetUserWithResponse(ctx context.Context, name string, params *v0041.SlurmdbV0041GetUserParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetUserWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmdbV0041GetUserParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetUserResponse, error)); ok {
		return rf(ctx, name, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v0041.SlurmdbV0041GetUserParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetUserResponse); ok {
		r0 = rf(ctx, name, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v0041.SlurmdbV0041GetUserParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetUserWithResponse'
type MockClient_SlurmdbV0041GetUserWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - params *v0041.SlurmdbV0041GetUserParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetUserWithResponse(ctx interface{}, name interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetUserWithResponse_Call {
	return &MockClient_SlurmdbV0041GetUserWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetUserWithResponse",
		append([]interface{}{ctx, name, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetUserWithResponse_Call) Run(run func(ctx context.Context, name string, params *v0041.SlurmdbV0041GetUserParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*v0041.SlurmdbV0041GetUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetUserWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetUserResponse, _a1 error) *MockClient_SlurmdbV0041GetUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetUserWithResponse_Call) RunAndReturn(run func(context.Context, string, *v0041.SlurmdbV0041GetUserParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetUserResponse, error)) *MockClient_SlurmdbV0041GetUserWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetUsersWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetUsersWithResponse(ctx context.Context, params *v0041.SlurmdbV0041GetUsersParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetUsersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetUsersWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetUsersParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetUsersResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetUsersParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetUsersResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041GetUsersParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetUsersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetUsersWithResponse'
type MockClient_SlurmdbV0041GetUsersWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetUsersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041GetUsersParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetUsersWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetUsersWithResponse_Call {
	return &MockClient_SlurmdbV0041GetUsersWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetUsersWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetUsersWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041GetUsersParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetUsersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041GetUsersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetUsersWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetUsersResponse, _a1 error) *MockClient_SlurmdbV0041GetUsersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetUsersWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041GetUsersParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetUsersResponse, error)) *MockClient_SlurmdbV0041GetUsersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetWckeyWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *MockClient) SlurmdbV0041GetWckeyWithResponse(ctx context.Context, id string, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetWckeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetWckeyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetWckeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetWckeyResponse, error)); ok {
		return rf(ctx, id, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetWckeyResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetWckeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetWckeyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetWckeyWithResponse'
type MockClient_SlurmdbV0041GetWckeyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetWckeyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetWckeyWithResponse(ctx interface{}, id interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetWckeyWithResponse_Call {
	return &MockClient_SlurmdbV0041GetWckeyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetWckeyWithResponse",
		append([]interface{}{ctx, id}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetWckeyWithResponse_Call) Run(run func(ctx context.Context, id string, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetWckeyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetWckeyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetWckeyResponse, _a1 error) *MockClient_SlurmdbV0041GetWckeyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetWckeyWithResponse_Call) RunAndReturn(run func(context.Context, string, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetWckeyResponse, error)) *MockClient_SlurmdbV0041GetWckeyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041GetWckeysWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClient) SlurmdbV0041GetWckeysWithResponse(ctx context.Context, params *v0041.SlurmdbV0041GetWckeysParams, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetWckeysResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041GetWckeysWithResponse")
	}

	var r0 *v0041.SlurmdbV0041GetWckeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetWckeysParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetWckeysResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041GetWckeysParams, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041GetWckeysResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041GetWckeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041GetWckeysParams, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041GetWckeysWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041GetWckeysWithResponse'
type MockClient_SlurmdbV0041GetWckeysWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041GetWckeysWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041GetWckeysParams
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041GetWckeysWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041GetWckeysWithResponse_Call {
	return &MockClient_SlurmdbV0041GetWckeysWithResponse_Call{Call: _e.mock.On("SlurmdbV0041GetWckeysWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041GetWckeysWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041GetWckeysParams, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041GetWckeysWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041GetWckeysParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041GetWckeysWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041GetWckeysResponse, _a1 error) *MockClient_SlurmdbV0041GetWckeysWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041GetWckeysWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041GetWckeysParams, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041GetWckeysResponse, error)) *MockClient_SlurmdbV0041GetWckeysWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostAccountsAssociationWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostAccountsAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsAssociationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostAccountsAssociationWithBodyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostAccountsAssociationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsAssociationResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostAccountsAssociationResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostAccountsAssociationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostAccountsAssociationWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostAccountsAssociationWithBodyWithResponse'
type MockClient_SlurmdbV0041PostAccountsAssociationWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostAccountsAssociationWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostAccountsAssociationWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostAccountsAssociationWithBodyWithResponse_Call {
	return &MockClient_SlurmdbV0041PostAccountsAssociationWithBodyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostAccountsAssociationWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostAccountsAssociationWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostAccountsAssociationWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAccountsAssociationWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostAccountsAssociationResponse, _a1 error) *MockClient_SlurmdbV0041PostAccountsAssociationWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAccountsAssociationWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsAssociationResponse, error)) *MockClient_SlurmdbV0041PostAccountsAssociationWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostAccountsAssociationWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostAccountsAssociationWithResponse(ctx context.Context, body v0041.SlurmdbV0041PostAccountsAssociationJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsAssociationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostAccountsAssociationWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostAccountsAssociationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostAccountsAssociationJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsAssociationResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostAccountsAssociationJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostAccountsAssociationResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostAccountsAssociationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0041.SlurmdbV0041PostAccountsAssociationJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostAccountsAssociationWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostAccountsAssociationWithResponse'
type MockClient_SlurmdbV0041PostAccountsAssociationWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostAccountsAssociationWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body v0041.SlurmdbV0041PostAccountsAssociationJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostAccountsAssociationWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostAccountsAssociationWithResponse_Call {
	return &MockClient_SlurmdbV0041PostAccountsAssociationWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostAccountsAssociationWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostAccountsAssociationWithResponse_Call) Run(run func(ctx context.Context, body v0041.SlurmdbV0041PostAccountsAssociationJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostAccountsAssociationWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(v0041.SlurmdbV0041PostAccountsAssociationJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAccountsAssociationWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostAccountsAssociationResponse, _a1 error) *MockClient_SlurmdbV0041PostAccountsAssociationWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAccountsAssociationWithResponse_Call) RunAndReturn(run func(context.Context, v0041.SlurmdbV0041PostAccountsAssociationJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsAssociationResponse, error)) *MockClient_SlurmdbV0041PostAccountsAssociationWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostAccountsWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostAccountsWithBodyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostAccountsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostAccountsResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostAccountsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostAccountsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostAccountsWithBodyWithResponse'
type MockClient_SlurmdbV0041PostAccountsWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostAccountsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostAccountsWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostAccountsWithBodyWithResponse_Call {
	return &MockClient_SlurmdbV0041PostAccountsWithBodyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostAccountsWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostAccountsWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostAccountsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAccountsWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostAccountsResponse, _a1 error) *MockClient_SlurmdbV0041PostAccountsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAccountsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsResponse, error)) *MockClient_SlurmdbV0041PostAccountsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostAccountsWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostAccountsWithResponse(ctx context.Context, body v0041.SlurmdbV0041PostAccountsJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostAccountsWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostAccountsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostAccountsJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostAccountsJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostAccountsResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostAccountsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0041.SlurmdbV0041PostAccountsJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostAccountsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostAccountsWithResponse'
type MockClient_SlurmdbV0041PostAccountsWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostAccountsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body v0041.SlurmdbV0041PostAccountsJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostAccountsWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostAccountsWithResponse_Call {
	return &MockClient_SlurmdbV0041PostAccountsWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostAccountsWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostAccountsWithResponse_Call) Run(run func(ctx context.Context, body v0041.SlurmdbV0041PostAccountsJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostAccountsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(v0041.SlurmdbV0041PostAccountsJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAccountsWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostAccountsResponse, _a1 error) *MockClient_SlurmdbV0041PostAccountsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAccountsWithResponse_Call) RunAndReturn(run func(context.Context, v0041.SlurmdbV0041PostAccountsJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAccountsResponse, error)) *MockClient_SlurmdbV0041PostAccountsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostAssociationsWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostAssociationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAssociationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostAssociationsWithBodyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostAssociationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAssociationsResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostAssociationsResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostAssociationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostAssociationsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostAssociationsWithBodyWithResponse'
type MockClient_SlurmdbV0041PostAssociationsWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostAssociationsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostAssociationsWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostAssociationsWithBodyWithResponse_Call {
	return &MockClient_SlurmdbV0041PostAssociationsWithBodyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostAssociationsWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostAssociationsWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostAssociationsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAssociationsWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostAssociationsResponse, _a1 error) *MockClient_SlurmdbV0041PostAssociationsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAssociationsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAssociationsResponse, error)) *MockClient_SlurmdbV0041PostAssociationsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostAssociationsWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostAssociationsWithResponse(ctx context.Context, body v0041.SlurmdbV0041PostAssociationsJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAssociationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostAssociationsWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostAssociationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostAssociationsJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAssociationsResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostAssociationsJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostAssociationsResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostAssociationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0041.SlurmdbV0041PostAssociationsJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostAssociationsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostAssociationsWithResponse'
type MockClient_SlurmdbV0041PostAssociationsWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostAssociationsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body v0041.SlurmdbV0041PostAssociationsJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostAssociationsWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostAssociationsWithResponse_Call {
	return &MockClient_SlurmdbV0041PostAssociationsWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostAssociationsWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostAssociationsWithResponse_Call) Run(run func(ctx context.Context, body v0041.SlurmdbV0041PostAssociationsJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostAssociationsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(v0041.SlurmdbV0041PostAssociationsJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAssociationsWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostAssociationsResponse, _a1 error) *MockClient_SlurmdbV0041PostAssociationsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostAssociationsWithResponse_Call) RunAndReturn(run func(context.Context, v0041.SlurmdbV0041PostAssociationsJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostAssociationsResponse, error)) *MockClient_SlurmdbV0041PostAssociationsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostClustersWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostClustersWithBodyWithResponse(ctx context.Context, params *v0041.SlurmdbV0041PostClustersParams, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostClustersWithBodyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostClustersParams, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostClustersResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostClustersParams, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostClustersResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041PostClustersParams, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostClustersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostClustersWithBodyWithResponse'
type MockClient_SlurmdbV0041PostClustersWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostClustersWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041PostClustersParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostClustersWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostClustersWithBodyWithResponse_Call {
	return &MockClient_SlurmdbV0041PostClustersWithBodyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostClustersWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostClustersWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041PostClustersParams, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostClustersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041PostClustersParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostClustersWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostClustersResponse, _a1 error) *MockClient_SlurmdbV0041PostClustersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostClustersWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041PostClustersParams, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostClustersResponse, error)) *MockClient_SlurmdbV0041PostClustersWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostClustersWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostClustersWithResponse(ctx context.Context, params *v0041.SlurmdbV0041PostClustersParams, body v0041.SlurmdbV0041PostClustersJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostClustersWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostClustersParams, v0041.SlurmdbV0041PostClustersJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostClustersResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostClustersParams, v0041.SlurmdbV0041PostClustersJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostClustersResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041PostClustersParams, v0041.SlurmdbV0041PostClustersJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostClustersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostClustersWithResponse'
type MockClient_SlurmdbV0041PostClustersWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostClustersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041PostClustersParams
//   - body v0041.SlurmdbV0041PostClustersJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostClustersWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostClustersWithResponse_Call {
	return &MockClient_SlurmdbV0041PostClustersWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostClustersWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostClustersWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041PostClustersParams, body v0041.SlurmdbV0041PostClustersJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostClustersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041PostClustersParams), args[2].(v0041.SlurmdbV0041PostClustersJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostClustersWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostClustersResponse, _a1 error) *MockClient_SlurmdbV0041PostClustersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostClustersWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041PostClustersParams, v0041.SlurmdbV0041PostClustersJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostClustersResponse, error)) *MockClient_SlurmdbV0041PostClustersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostConfigWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostConfigWithBodyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostConfigResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostConfigResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostConfigWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostConfigWithBodyWithResponse'
type MockClient_SlurmdbV0041PostConfigWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostConfigWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostConfigWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostConfigWithBodyWithResponse_Call {
	return &MockClient_SlurmdbV0041PostConfigWithBodyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostConfigWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostConfigWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostConfigWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostConfigWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostConfigResponse, _a1 error) *MockClient_SlurmdbV0041PostConfigWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostConfigWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostConfigResponse, error)) *MockClient_SlurmdbV0041PostConfigWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostConfigWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostConfigWithResponse(ctx context.Context, body v0041.SlurmdbV0041PostConfigJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostConfigWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostConfigJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostConfigResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostConfigJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostConfigResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0041.SlurmdbV0041PostConfigJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostConfigWithResponse'
type MockClient_SlurmdbV0041PostConfigWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostConfigWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body v0041.SlurmdbV0041PostConfigJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostConfigWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostConfigWithResponse_Call {
	return &MockClient_SlurmdbV0041PostConfigWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostConfigWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostConfigWithResponse_Call) Run(run func(ctx context.Context, body v0041.SlurmdbV0041PostConfigJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(v0041.SlurmdbV0041PostConfigJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostConfigWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostConfigResponse, _a1 error) *MockClient_SlurmdbV0041PostConfigWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostConfigWithResponse_Call) RunAndReturn(run func(context.Context, v0041.SlurmdbV0041PostConfigJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostConfigResponse, error)) *MockClient_SlurmdbV0041PostConfigWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostQosWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostQosWithBodyWithResponse(ctx context.Context, params *v0041.SlurmdbV0041PostQosParams, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostQosResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostQosWithBodyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostQosResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostQosParams, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostQosResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostQosParams, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostQosResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostQosResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041PostQosParams, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostQosWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostQosWithBodyWithResponse'
type MockClient_SlurmdbV0041PostQosWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostQosWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041PostQosParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostQosWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostQosWithBodyWithResponse_Call {
	return &MockClient_SlurmdbV0041PostQosWithBodyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostQosWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostQosWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041PostQosParams, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostQosWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041PostQosParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostQosWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostQosResponse, _a1 error) *MockClient_SlurmdbV0041PostQosWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostQosWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041PostQosParams, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostQosResponse, error)) *MockClient_SlurmdbV0041PostQosWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostQosWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostQosWithResponse(ctx context.Context, params *v0041.SlurmdbV0041PostQosParams, body v0041.SlurmdbV0041PostQosJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostQosResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostQosWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostQosResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostQosParams, v0041.SlurmdbV0041PostQosJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostQosResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostQosParams, v0041.SlurmdbV0041PostQosJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostQosResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostQosResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041PostQosParams, v0041.SlurmdbV0041PostQosJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostQosWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostQosWithResponse'
type MockClient_SlurmdbV0041PostQosWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostQosWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041PostQosParams
//   - body v0041.SlurmdbV0041PostQosJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostQosWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostQosWithResponse_Call {
	return &MockClient_SlurmdbV0041PostQosWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostQosWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostQosWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041PostQosParams, body v0041.SlurmdbV0041PostQosJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostQosWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041PostQosParams), args[2].(v0041.SlurmdbV0041PostQosJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostQosWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostQosResponse, _a1 error) *MockClient_SlurmdbV0041PostQosWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostQosWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041PostQosParams, v0041.SlurmdbV0041PostQosJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostQosResponse, error)) *MockClient_SlurmdbV0041PostQosWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostTresWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostTresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostTresResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostTresWithBodyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostTresResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostTresResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostTresResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostTresResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostTresWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostTresWithBodyWithResponse'
type MockClient_SlurmdbV0041PostTresWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostTresWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostTresWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostTresWithBodyWithResponse_Call {
	return &MockClient_SlurmdbV0041PostTresWithBodyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostTresWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostTresWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostTresWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostTresWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostTresResponse, _a1 error) *MockClient_SlurmdbV0041PostTresWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostTresWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostTresResponse, error)) *MockClient_SlurmdbV0041PostTresWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostTresWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostTresWithResponse(ctx context.Context, body v0041.SlurmdbV0041PostTresJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostTresResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostTresWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostTresResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostTresJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostTresResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostTresJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostTresResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostTresResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0041.SlurmdbV0041PostTresJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostTresWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostTresWithResponse'
type MockClient_SlurmdbV0041PostTresWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostTresWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body v0041.SlurmdbV0041PostTresJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostTresWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostTresWithResponse_Call {
	return &MockClient_SlurmdbV0041PostTresWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostTresWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostTresWithResponse_Call) Run(run func(ctx context.Context, body v0041.SlurmdbV0041PostTresJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostTresWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(v0041.SlurmdbV0041PostTresJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostTresWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostTresResponse, _a1 error) *MockClient_SlurmdbV0041PostTresWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostTresWithResponse_Call) RunAndReturn(run func(context.Context, v0041.SlurmdbV0041PostTresJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostTresResponse, error)) *MockClient_SlurmdbV0041PostTresWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostUsersAssociationWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostUsersAssociationWithBodyWithResponse(ctx context.Context, params *v0041.SlurmdbV0041PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersAssociationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostUsersAssociationWithBodyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostUsersAssociationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostUsersAssociationParams, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersAssociationResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostUsersAssociationParams, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostUsersAssociationResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostUsersAssociationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041PostUsersAssociationParams, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostUsersAssociationWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostUsersAssociationWithBodyWithResponse'
type MockClient_SlurmdbV0041PostUsersAssociationWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostUsersAssociationWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041PostUsersAssociationParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostUsersAssociationWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostUsersAssociationWithBodyWithResponse_Call {
	return &MockClient_SlurmdbV0041PostUsersAssociationWithBodyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostUsersAssociationWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostUsersAssociationWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostUsersAssociationWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041PostUsersAssociationParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostUsersAssociationWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostUsersAssociationResponse, _a1 error) *MockClient_SlurmdbV0041PostUsersAssociationWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostUsersAssociationWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041PostUsersAssociationParams, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersAssociationResponse, error)) *MockClient_SlurmdbV0041PostUsersAssociationWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostUsersAssociationWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostUsersAssociationWithResponse(ctx context.Context, params *v0041.SlurmdbV0041PostUsersAssociationParams, body v0041.SlurmdbV0041PostUsersAssociationJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersAssociationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostUsersAssociationWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostUsersAssociationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostUsersAssociationParams, v0041.SlurmdbV0041PostUsersAssociationJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersAssociationResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostUsersAssociationParams, v0041.SlurmdbV0041PostUsersAssociationJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostUsersAssociationResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostUsersAssociationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041PostUsersAssociationParams, v0041.SlurmdbV0041PostUsersAssociationJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostUsersAssociationWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostUsersAssociationWithResponse'
type MockClient_SlurmdbV0041PostUsersAssociationWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostUsersAssociationWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041PostUsersAssociationParams
//   - body v0041.SlurmdbV0041PostUsersAssociationJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostUsersAssociationWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostUsersAssociationWithResponse_Call {
	return &MockClient_SlurmdbV0041PostUsersAssociationWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostUsersAssociationWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostUsersAssociationWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041PostUsersAssociationParams, body v0041.SlurmdbV0041PostUsersAssociationJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostUsersAssociationWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041PostUsersAssociationParams), args[2].(v0041.SlurmdbV0041PostUsersAssociationJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostUsersAssociationWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostUsersAssociationResponse, _a1 error) *MockClient_SlurmdbV0041PostUsersAssociationWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostUsersAssociationWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041PostUsersAssociationParams, v0041.SlurmdbV0041PostUsersAssociationJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersAssociationResponse, error)) *MockClient_SlurmdbV0041PostUsersAssociationWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostUsersWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostUsersWithBodyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostUsersResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostUsersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostUsersWithBodyWithResponse'
type MockClient_SlurmdbV0041PostUsersWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostUsersWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostUsersWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostUsersWithBodyWithResponse_Call {
	return &MockClient_SlurmdbV0041PostUsersWithBodyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostUsersWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostUsersWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostUsersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostUsersWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostUsersResponse, _a1 error) *MockClient_SlurmdbV0041PostUsersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostUsersWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersResponse, error)) *MockClient_SlurmdbV0041PostUsersWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostUsersWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostUsersWithResponse(ctx context.Context, body v0041.SlurmdbV0041PostUsersJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostUsersWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostUsersJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0041.SlurmdbV0041PostUsersJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostUsersResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0041.SlurmdbV0041PostUsersJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostUsersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostUsersWithResponse'
type MockClient_SlurmdbV0041PostUsersWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostUsersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body v0041.SlurmdbV0041PostUsersJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostUsersWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostUsersWithResponse_Call {
	return &MockClient_SlurmdbV0041PostUsersWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostUsersWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostUsersWithResponse_Call) Run(run func(ctx context.Context, body v0041.SlurmdbV0041PostUsersJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostUsersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(v0041.SlurmdbV0041PostUsersJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostUsersWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostUsersResponse, _a1 error) *MockClient_SlurmdbV0041PostUsersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostUsersWithResponse_Call) RunAndReturn(run func(context.Context, v0041.SlurmdbV0041PostUsersJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostUsersResponse, error)) *MockClient_SlurmdbV0041PostUsersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostWckeysWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostWckeysWithBodyWithResponse(ctx context.Context, params *v0041.SlurmdbV0041PostWckeysParams, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostWckeysResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostWckeysWithBodyWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostWckeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostWckeysParams, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostWckeysResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostWckeysParams, string, io.Reader, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostWckeysResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostWckeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041PostWckeysParams, string, io.Reader, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostWckeysWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostWckeysWithBodyWithResponse'
type MockClient_SlurmdbV0041PostWckeysWithBodyWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostWckeysWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041PostWckeysParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostWckeysWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostWckeysWithBodyWithResponse_Call {
	return &MockClient_SlurmdbV0041PostWckeysWithBodyWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostWckeysWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostWckeysWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041PostWckeysParams, contentType string, body io.Reader, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostWckeysWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041PostWckeysParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostWckeysWithBodyWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostWckeysResponse, _a1 error) *MockClient_SlurmdbV0041PostWckeysWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostWckeysWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041PostWckeysParams, string, io.Reader, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostWckeysResponse, error)) *MockClient_SlurmdbV0041PostWckeysWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SlurmdbV0041PostWckeysWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *MockClient) SlurmdbV0041PostWckeysWithResponse(ctx context.Context, params *v0041.SlurmdbV0041PostWckeysParams, body v0041.SlurmdbV0041PostWckeysJSONRequestBody, reqEditors ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostWckeysResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SlurmdbV0041PostWckeysWithResponse")
	}

	var r0 *v0041.SlurmdbV0041PostWckeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostWckeysParams, v0041.SlurmdbV0041PostWckeysJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostWckeysResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0041.SlurmdbV0041PostWckeysParams, v0041.SlurmdbV0041PostWckeysJSONRequestBody, ...v0041.RequestEditorFn) *v0041.SlurmdbV0041PostWckeysResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0041.SlurmdbV0041PostWckeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0041.SlurmdbV0041PostWckeysParams, v0041.SlurmdbV0041PostWckeysJSONRequestBody, ...v0041.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_SlurmdbV0041PostWckeysWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlurmdbV0041PostWckeysWithResponse'
type MockClient_SlurmdbV0041PostWckeysWithResponse_Call struct {
	*mock.Call
}

// SlurmdbV0041PostWckeysWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *v0041.SlurmdbV0041PostWckeysParams
//   - body v0041.SlurmdbV0041PostWckeysJSONRequestBody
//   - reqEditors ...v0041.RequestEditorFn
func (_e *MockClient_Expecter) SlurmdbV0041PostWckeysWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClient_SlurmdbV0041PostWckeysWithResponse_Call {
	return &MockClient_SlurmdbV0041PostWckeysWithResponse_Call{Call: _e.mock.On("SlurmdbV0041PostWckeysWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *MockClient_SlurmdbV0041PostWckeysWithResponse_Call) Run(run func(ctx context.Context, params *v0041.SlurmdbV0041PostWckeysParams, body v0041.SlurmdbV0041PostWckeysJSONRequestBody, reqEditors ...v0041.RequestEditorFn)) *MockClient_SlurmdbV0041PostWckeysWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v0041.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v0041.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*v0041.SlurmdbV0041PostWckeysParams), args[2].(v0041.SlurmdbV0041PostWckeysJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_SlurmdbV0041PostWckeysWithResponse_Call) Return(_a0 *v0041.SlurmdbV0041PostWckeysResponse, _a1 error) *MockClient_SlurmdbV0041PostWckeysWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_SlurmdbV0041PostWckeysWithResponse_Call) RunAndReturn(run func(context.Context, *v0041.SlurmdbV0041PostWckeysParams, v0041.SlurmdbV0041PostWckeysJSONRequestBody, ...v0041.RequestEditorFn) (*v0041.SlurmdbV0041PostWckeysResponse, error)) *MockClient_SlurmdbV0041PostWckeysWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
