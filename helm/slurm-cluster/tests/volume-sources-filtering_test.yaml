suite: test volume sources field filtering
templates:
  - templates/slurm-cluster-cr.yaml
tests:
  - it: should exclude createPVC, storageClassName, and size fields from volumeSources
    set:
      clusterName: test-cluster
      k8sNodeFilters:
        - name: gpu
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: "nebius.com/node-group-id"
                        operator: In
                        values:
                          - "test-node-group"
      volumeSources:
        - name: jail
          createPVC: true
          storageClassName: "fast-ssd"
          size: "100Gi"
          persistentVolumeClaim:
            claimName: "jail-pvc"
        - name: shared-data
          createPVC: false
          storageClassName: "standard"
          size: "500Gi"
          nfs:
            server: "nfs.example.com"
            path: "/shared"
      populateJail:
        k8sNodeFilterName: "gpu"
      slurmNodes:
        accounting:
          k8sNodeFilterName: "no-gpu"
        controller:
          k8sNodeFilterName: "no-gpu"
          volumes:
            spool:
              volumeClaimTemplateSpec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 50Gi
            jail:
              volumeSourceName: "jail"
        worker:
          size: 2
          k8sNodeFilterName: "gpu"
          volumes:
            jail:
              volumeSourceName: "jail"
            shared:
              volumeSourceName: "shared-data"
        login:
          size: 2
          k8sNodeFilterName: "no-gpu"
          sshRootPublicKeys:
            - "ssh-ed25519 test-key"
          sshdServiceType: "LoadBalancer"
          volumes:
            jail:
              volumeSourceName: "jail"
        exporter:
          size: 1
          k8sNodeFilterName: "no-gpu"
          volumes:
            jail:
              volumeSourceName: "jail"
        rest:
          size: 2
          k8sNodeFilterName: "no-gpu"
      sConfigController:
        node:
          k8sNodeFilterName: "system"
          size: 1
      images:
        slurmctld: "test-image"
        slurmrestd: "test-image"
        slurmd: "test-image"
        sshd: "test-image"
        munge: "test-image"
        populateJail: "test-image"
        slurmdbd: "test-image"
        soperatorExporter: "test-image"
        sConfigController: "test-image"
        mariaDB: "test-image"
    asserts:
      # Check that volumeSources exist in spec
      - exists:
          path: spec.volumeSources
      - hasDocuments:
          count: 1
      - isKind:
          of: SlurmCluster
      # Check that createPVC field is NOT present in spec.volumeSources (skipping [0] which is slurm-scripts)
      - notExists:
          path: spec.volumeSources[1].createPVC
      - notExists:
          path: spec.volumeSources[2].createPVC
      # Check that storageClassName field is NOT present in spec.volumeSources
      - notExists:
          path: spec.volumeSources[1].storageClassName
      - notExists:
          path: spec.volumeSources[2].storageClassName
      # Check that size field is NOT present in spec.volumeSources
      - notExists:
          path: spec.volumeSources[1].size
      - notExists:
          path: spec.volumeSources[2].size
      # Check that valid CRD fields are still present
      - exists:
          path: spec.volumeSources[0].name
      - exists:
          path: spec.volumeSources[1].name
      - exists:
          path: spec.volumeSources[2].name
      - exists:
          path: spec.volumeSources[1].persistentVolumeClaim
      - exists:
          path: spec.volumeSources[2].nfs
      # Verify correct names are preserved (slurm-scripts is always first)
      - equal:
          path: spec.volumeSources[0].name
          value: "slurm-scripts"
      - equal:
          path: spec.volumeSources[1].name
          value: "jail"
      - equal:
          path: spec.volumeSources[2].name
          value: "shared-data"

  # Test that only name field is excluded when no helm-specific fields present
  - it: should only exclude name field when no helm-specific fields are present
    set:
      clusterName: test-cluster
      k8sNodeFilters:
        - name: gpu
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: "nebius.com/node-group-id"
                        operator: In
                        values:
                          - "test-node-group"
      volumeSources:
        - name: simple-pvc
          persistentVolumeClaim:
            claimName: "simple-pvc"
            readOnly: true
      populateJail:
        k8sNodeFilterName: "gpu"
      slurmNodes:
        accounting:
          k8sNodeFilterName: "no-gpu"
        controller:
          k8sNodeFilterName: "no-gpu"
          volumes:
            spool:
              volumeClaimTemplateSpec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 50Gi
            jail:
              volumeSourceName: "simple-pvc"
        worker:
          size: 2
          k8sNodeFilterName: "gpu"
          volumes:
            jail:
              volumeSourceName: "simple-pvc"
        login:
          size: 2
          k8sNodeFilterName: "no-gpu"
          sshRootPublicKeys:
            - "ssh-ed25519 test-key"
          sshdServiceType: "LoadBalancer"
          volumes:
            jail:
              volumeSourceName: "simple-pvc"
        exporter:
          size: 1
          k8sNodeFilterName: "no-gpu"
          volumes:
            jail:
              volumeSourceName: "simple-pvc"
        rest:
          size: 2
          k8sNodeFilterName: "no-gpu"
      sConfigController:
        node:
          k8sNodeFilterName: "system"
          size: 1
      images:
        slurmctld: "test-image"
        slurmrestd: "test-image"
        slurmd: "test-image"
        sshd: "test-image"
        munge: "test-image"
        populateJail: "test-image"
        slurmdbd: "test-image"
        soperatorExporter: "test-image"
        sConfigController: "test-image"
        mariaDB: "test-image"
    asserts:
      # Check that volumeSource exists with correct structure (index [1] because [0] is slurm-scripts)
      - exists:
          path: spec.volumeSources[1].persistentVolumeClaim
      - exists:
          path: spec.volumeSources[1].persistentVolumeClaim.claimName
      - exists:
          path: spec.volumeSources[1].persistentVolumeClaim.readOnly
      # Verify correct values
      - equal:
          path: spec.volumeSources[0].name
          value: "slurm-scripts"
      - equal:
          path: spec.volumeSources[1].name
          value: "simple-pvc"
      - equal:
          path: spec.volumeSources[1].persistentVolumeClaim.claimName
          value: "simple-pvc"
      - equal:
          path: spec.volumeSources[1].persistentVolumeClaim.readOnly
          value: true