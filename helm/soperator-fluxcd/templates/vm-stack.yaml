{{- if and .Values.observability.enabled .Values.observability.vmStack.enabled }}
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: {{ include "soperator-fluxcd.fullname" . }}-vm-stack
  labels:
  {{- include "soperator-fluxcd.labels" . | nindent 4 }}
spec:
  chart:
    spec:
      chart: victoria-metrics-k8s-stack
      interval: {{ .Values.observability.vmStack.interval }}
      sourceRef:
        kind: HelmRepository
        name: {{ include "soperator-fluxcd.fullname" . }}-victoriametrics
      version: {{ .Values.observability.vmStack.version }}
  dependsOn:
  - name: {{ include "soperator-fluxcd.fullname" . }}-ns
  {{- if .Values.certManager.enabled }}
  - name: {{ include "soperator-fluxcd.fullname" . }}-cert-manager
  {{- end }}
  - name: {{ include "soperator-fluxcd.fullname" . }}-victoria-metrics-operator-crds
  install:
    crds: Skip
    remediation:
      retries: 3
  upgrade:
    crds: Skip
    remediation:
      retries: 3
      remediateLastFailure: true
  interval: {{ .Values.observability.vmStack.interval }}
  timeout: {{ .Values.observability.vmStack.timeout }}
  releaseName: {{ .Values.observability.vmStack.releaseName }}
  {{- if .Values.observability.vmStack.namespace }}
  targetNamespace: {{ .Values.observability.vmStack.namespace }}
  {{- end }}
  {{- if .Values.observability.vmStack.driftDetection }}
  driftDetection:
    {{- toYaml .Values.observability.vmStack.driftDetection | nindent 4 -}}
  {{- end }}
  values:
  {{- if .Values.observability.vmStack.overrideValues }}
    {{- toYaml .Values.observability.vmStack.overrideValues | nindent 4 }}
  {{- else }}
      alertmanager:
        enabled: false
      crds:
        enabled: false
      defaultRules:
        groups:
          etcd:
            create: false
          vmcluster:
            create: false
        rules:
          KubeHpaMaxedOut:
            create: false
          KubeMemoryOvercommit:
            create: false
          TooHighChurnRate24h:
            create: false
          TooManyScrapeErrors:
            create: false
      grafana:
        enabled: true
        {{- if .Values.observability.vmStack.values.grafanaIni }}
        grafana.ini: {{- toYaml .Values.observability.vmStack.values.grafanaIni | nindent 10 }}
        {{- end }}
        assertNoLeakedSecrets: false
        plugins:
          - https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
          - victoriametrics-logs-datasource
        sidecar:
          dashboards:
            searchNamespace: {{- toYaml .Values.observability.vmStack.values.dashboardNamespaces | nindent 12 }}
          datasources:
            searchNamespace: {{- toYaml .Values.observability.vmStack.values.dashboardNamespaces | nindent 12 }}
      kube-state-metrics:
        extraArgs:
          - '--metric-allowlist=kube_pod_info'
          - '--metric-allowlist=kube_pod_status_phase'
          - '--metric-allowlist=kube_pod_container_status_running'
          - '--metric-allowlist=kube_pod_container_status_waiting'
          - '--metric-allowlist=kube_pod_container_status_terminated'
          - '--metric-allowlist=kube_pod_ips'
          - '--metric-allowlist=kube_pod_status_reason'
          - '--metric-allowlist=kube_pod_spec_volumes_persistentvolumeclaims_info'
          - '--metric-allowlist=kube_pod_container_status_last_terminated_exitcode'
          - '--metric-allowlist=kube_pod_container_resource_requests'
          - '--metric-allowlist=kube_pod_container_resource_limits'
          - '--metric-allowlist=kube_pod_container_status_restarts_total'
          - '--metric-allowlist=kube_pod_container_status_terminated_reason'
          - '--metric-allowlist=kube_pod_container_status_terminated_signal'
          - '--metric-allowlist=kube_node_status_condition'
          - '--metric-allowlist=kube_node_info'
          - '--metric-allowlist=kube_customresource_.*'
          - '--metric-allowlist=kube_node_labels'
          - '--metric-labels-allowlist=nodes=[nebius.com/driverful,nebius.com/gpu,nebius.com/node-group-id,slurm.nebius.ai/nodeset,slurm.nebius.ai/workload]'
        rbac:
          extraRules:
            - apiGroups:
              - slurm.nebius.ai
              resources:
              - slurmclusters
              verbs:
              - get
              - list
              - watch
        customResourceState:
          enabled: true
          config:
            kind: CustomResourceStateMetrics
            spec:
              resources:
                - groupVersionKind:
                    group: slurm.nebius.ai
                    version: v1
                    kind: SlurmCluster
                  metrics:
                    # Info metric for static fields like clusterType and crVersion
                    - name: slurmcluster_info
                      help: "Basic static information about the SlurmCluster resource"
                      each:
                        type: Info
                        info:
                          labelsFromPath:
                            name: [metadata, name]
                            namespace: [metadata, namespace]
                            cluster_type: [spec, clusterType]
                            cr_version: [spec, crVersion]
                    # Gauge metrics for all numeric counters
                    - name: slurmcluster_slurmconfig_max_job_count
                      help: "Max job count from spec.slurmConfig.maxJobCount"
                      each:
                        type: Gauge
                        gauge:
                          path: [spec, slurmConfig, maxJobCount]
                    - name: slurmcluster_slurmconfig_message_timeout
                      help: "Message timeout from spec.slurmConfig.messageTimeout"
                      each:
                        type: Gauge
                        gauge:
                          path: [spec, slurmConfig, messageTimeout]
                    - name: slurmcluster_slurmconfig_min_job_age
                      help: "Min job age from spec.slurmConfig.minJobAge"
                      each:
                        type: Gauge
                        gauge:
                          path: [spec, slurmConfig, minJobAge]
                    - name: slurmcluster_slurmnodes_login_size
                      help: "Login node count from spec.slurmNodes.login.size"
                      each:
                        type: Gauge
                        gauge:
                          path: [spec, slurmNodes, login, size]
                    - name: slurmcluster_slurmnodes_rest_size
                      help: "Rest node count from spec.slurmNodes.rest.size"
                      each:
                        type: Gauge
                        gauge:
                          path: [spec, slurmNodes, rest, size]
                    - name: slurmcluster_slurmnodes_worker_size
                      help: "Worker node count from spec.slurmNodes.worker.size"
                      each:
                        type: Gauge
                        gauge:
                          path: [spec, slurmNodes, worker, size]
                    - name: slurmcluster_ready_login
                      help: "Ready login nodes from status.readyLogin"
                      each:
                        type: Gauge
                        gauge:
                          path: [status, readyLogin]
                    - name: slurmcluster_ready_sconfig_controller
                      help: "Ready SConfigController nodes from status.readySConfigController"
                      each:
                        type: Gauge
                        gauge:
                          path: [status, readySConfigController]
                    - name: slurmcluster_ready_workers
                      help: "Ready workers from status.readyWorkers"
                      each:
                        type: Gauge
                        gauge:
                          path: [status, readyWorkers]
                    # Gauge for list of conditions
                    - name: slurmcluster_status_condition_status
                      help: "SlurmCluster conditions status"
                      each:
                        type: Gauge
                        gauge:
                          path: [status, conditions]
                          labelsFromPath:
                            type: ["type"]
                          valueFrom: ["status"]
                    # StateSet for status.phase
                    - name: slurmcluster_status_phase
                      help: "Current phase of the SlurmCluster resource"
                      each:
                        type: StateSet
                        stateSet:
                          labelName: phase
                          path: [status, phase]
                          list: ["Available", "Reconciling", "Not available"]
        prometheusScrape: false
        selfMonitor:
          enabled: true
        collectors:
          - pods
          - nodes
        vmServiceScrape:
          spec:
            endpoints:
              - honorLabels: true
                metricRelabelConfigs:
                  - action: labeldrop
                    regex: (uid|container_id|image_id)
                port: http
              - honorLabels: true
                metricRelabelConfigs:
                  - action: labeldrop
                    regex: (uid|container_id|image_id)
                port: metrics
            jobLabel: app.kubernetes.io/name
      kubeControllerManager:
        enabled: false
      kubeEtcd:
        enabled: false
      kubeProxy:
        enabled: false
        vmScrape:
          spec:
            endpoints:
              - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
                port: http-metrics
                scheme: http
            jobLabel: jobLabel
            namespaceSelector:
              matchNames:
                - kube-system
      kubeScheduler:
        enabled: false
      kubelet:
        enabled: true
        vmScrapes:
          kubelet:
            enabled: true
            spec:
              bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
              honorLabels: true
              honorTimestamps: false
              interval: 30s
              metricRelabelConfigs:
              - action: labeldrop
                regex: (uid)
              - action: labeldrop
                regex: (id|name)
                source_labels:
                - __name__
              relabelConfigs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(kubernetes_io_arch|node_kubernetes_io_instance_type)
                replacement: ${1}
              - sourceLabels:
                - __meta_kubernetes_node_name
                targetLabel: instance
              - replacement: kubelet
                targetLabel: job
              scheme: https
              scrapeTimeout: 5s
              selector: {}
              tlsConfig:
                caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecureSkipVerify: true
          cadvisor:
            enabled: true
            spec:
              bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
              honorLabels: true
              honorTimestamps: false
              interval: 30s
              metricRelabelConfigs:
              - action: labeldrop
                regex: (uid)
              - action: labeldrop
                regex: (id|name)
              - action: drop
                regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
                source_labels:
                - __name__
              path: /metrics/cadvisor
              relabelConfigs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(kubernetes_io_arch|node_kubernetes_io_instance_type)
                replacement: ${1}
              - sourceLabels:
                - __meta_kubernetes_node_name
                targetLabel: instance
              - sourceLabels:
                - __metrics_path__
                targetLabel: metrics_path
              - replacement: kubelet
                targetLabel: job
          probes:
            enabled: true
            spec:
              bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
              honorLabels: true
              honorTimestamps: false
              interval: 30s
              metricRelabelConfigs:
              - action: labeldrop
                regex: (uid)
              - action: labeldrop
                regex: (id|name)
              - action: drop
                regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
                source_labels:
                - __name__
              path: /metrics/probes
              relabelConfigs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(kubernetes_io_arch|node_kubernetes_io_instance_type)
                replacement: ${1}
              - sourceLabels:
                - __meta_kubernetes_node_name
                targetLabel: instance
              - sourceLabels:
                - __metrics_path__
                targetLabel: metrics_path
              - replacement: kubelet
                targetLabel: job
              scheme: https
              scrapeTimeout: 5s
              selector: {}
              tlsConfig:
                caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecureSkipVerify: true
          resources:
            enabled: true
            spec:
              bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
              honorLabels: true
              honorTimestamps: false
              interval: 30s
              metricRelabelConfigs:
              - action: labeldrop
                regex: (uid)
              - action: labeldrop
                regex: (id|name)
              - action: drop
                regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
                source_labels:
                - __name__
              path: /metrics/resource
              relabelConfigs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(kubernetes_io_arch|node_kubernetes_io_instance_type)
                replacement: ${1}
              - sourceLabels:
                - __meta_kubernetes_node_name
                targetLabel: instance
              - sourceLabels:
                - __metrics_path__
                targetLabel: metrics_path
              - replacement: kubelet
                targetLabel: job
              scheme: https
              scrapeTimeout: 5s
              selector: {}
              tlsConfig:
                caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecureSkipVerify: true
      coreDns:
        enabled: false
      prometheus-node-exporter:
        enabled: {{ .Values.observability.vmStack.values.prometheusNodeExporter.enabled }}
        extraArgs:
          {{- toYaml .Values.observability.vmStack.values.prometheusNodeExporter.extraArgs | nindent 10 }}
      victoria-metrics-operator:
        admissionWebhooks:
          enable: true
        crd:
          cleanup:
            enabled: false
          create: false
        operator:
          disable_prometheus_converter: false
          enable_converter_ownership: true
      vmagent:
        spec:
          {{- $hasPublicEndpoint := .Values.observability.publicEndpointEnabled }}
          {{- $hasVmagentSpec := .Values.observability.vmStack.values.vmagent.spec }}

          {{- $hasExternalLabels := and $hasVmagentSpec $hasVmagentSpec.externalLabels }}
          {{- if and $hasExternalLabels (gt (len $hasExternalLabels) 0) }}
          externalLabels:
            {{- toYaml $hasExternalLabels | nindent 12 }}
          {{- end }}

          remoteWriteSettings:
          {{- $hasRemoteWriteSettings := and $hasVmagentSpec $hasVmagentSpec.remoteWriteSettings }}
          {{- $remoteWriteSettingsNotEmpty := and $hasRemoteWriteSettings (gt (len $hasVmagentSpec.remoteWriteSettings) 0) }}
          {{- if $hasPublicEndpoint }}
            label:
              cluster: "%{CLUSTER_NAME}"
              container_id: {{ .Values.observability.metricsProjectId  }}
              {{- if and $hasExternalLabels (gt (len $hasExternalLabels) 0) }}
              {{- toYaml $hasExternalLabels | nindent 14 }}
              {{- end }}
          {{- if and $hasVmagentSpec $hasVmagentSpec.remoteWriteSettings }}
          {{- toYaml $hasVmagentSpec.remoteWriteSettings | nindent 12 }}
          {{- end }}
          {{- else}}
          {{- toYaml $hasVmagentSpec.remoteWriteSettings | nindent 12 }}
          {{- end }}

          remoteWrite:
          {{- $hasRemoteWrite := and $hasVmagentSpec $hasVmagentSpec.remoteWrite }}
          {{- $remoteWriteNotEmpty := and $hasRemoteWrite (gt (len $hasVmagentSpec.remoteWrite) 0) }}
          {{- if $hasPublicEndpoint }}
            - url: https://write.monitoring.{{ .Values.observability.region }}.nebius.cloud/projects/{{ .Values.observability.metricsProjectId }}/buckets/soperator/prometheus
              inlineUrlRelabelConfig:
                - action: labeldrop
                  regex: feature_node_kubernetes_io_.*|kubernetes_io_.*|nvidia_com_gpu.*
                - action: labeldrop
                  regex: UUID|DCGM_FI_PROCESS_NAME|pci_bus_id|prometheus|DCGM_FI_DEV_SERIAL|DCGM_FI_DEV_NAME|job
          {{- if $remoteWriteNotEmpty }}
          {{- toYaml $hasVmagentSpec.remoteWrite | nindent 12 }}
          {{- end }}
          {{- else}}
          {{- toYaml $hasVmagentSpec.remoteWrite | nindent 12 }}
          {{- end }}

          volumeMounts:
          {{- $hasVolumeMounts := and $hasVmagentSpec $hasVmagentSpec.volumeMounts }}
          {{- $volumeMountsNotEmpty := and $hasVolumeMounts (gt (len $hasVmagentSpec.volumeMounts) 0) }}
          {{- if $hasPublicEndpoint }}
            - name: cloud-metadata
              mountPath: /mnt/cloud-metadata
              readOnly: true
          {{- if $volumeMountsNotEmpty }}
          {{- toYaml $hasVmagentSpec.volumeMounts | nindent 12 }}
          {{- end }}
          {{- else}}
          {{- toYaml $hasVmagentSpec.volumeMounts | nindent 12 }}
          {{- end }}

          volumes:
          {{- $hasVolumes := and $hasVmagentSpec $hasVmagentSpec.volumes }}
          {{- $volumesNotEmpty := and $hasVolumes (gt (len $hasVmagentSpec.volumes) 0) }}
          {{- if $hasPublicEndpoint }}
            - name: cloud-metadata
              hostPath:
                path: /mnt/cloud-metadata
                type: Directory
          {{- if $volumesNotEmpty }}
          {{- toYaml $hasVmagentSpec.volumes | nindent 12 }}
          {{- end }}
          {{- else}}
          {{- toYaml $hasVmagentSpec.volumes | nindent 12 }}
          {{- end }}

          extraArgs:
          {{- $hasExtraArgs := and $hasVmagentSpec $hasVmagentSpec.extraArgs }}
          {{- $extraArgsNotEmpty := and $hasExtraArgs (gt (len $hasVmagentSpec.extraArgs) 0) }}
          {{- if $hasPublicEndpoint }}
            remoteWrite.flushInterval: 2s
            remoteWrite.bearerTokenFile: /mnt/cloud-metadata/tsa-token
            remoteWrite.maxRowsPerBlock: "12000"
          {{- if $extraArgsNotEmpty }}
          {{- toYaml $hasVmagentSpec.extraArgs | nindent 12 }}
          {{- end }}
          {{- else}}
          {{- toYaml $hasVmagentSpec.extraArgs | nindent 12 }}
          {{- end }}

          extraEnvs:
          {{- $hasExtraEnv := and $hasVmagentSpec $hasVmagentSpec.extraEnvs }}
          {{- $extraEnvNotEmpty := and $hasExtraEnv (gt (len $hasVmagentSpec.extraEnvs) 0) }}
          {{- if $hasPublicEndpoint }}
            - name: CLUSTER_NAME
              value: {{ .Values.observability.clusterName | quote }}
          {{- if $extraEnvNotEmpty }}
          {{- toYaml $hasVmagentSpec.extraEnvs | nindent 12 }}
          {{- end }}
          {{- else}}
          {{- toYaml $hasVmagentSpec.extraEnvs | nindent 12 }}
          {{- end }}

          resources:
            {{- toYaml $hasVmagentSpec.resources | nindent 12 }}

      vmalert:
        enabled: false
      vmsingle: {{ toYaml .Values.observability.vmStack.values.vmsingle | nindent 8 }}
  {{- end }}
  valuesFrom:
  - kind: ConfigMap
    name: terraform-victoria-metrics-operator
    optional: true
    valuesKey: values.yaml
  - kind: ConfigMap
    name: victoria-metrics-operator
    optional: true
    valuesKey: values.yaml
{{- end }}
